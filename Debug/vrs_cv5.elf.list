
vrs_cv5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b58  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08001c94  08001c94  00011c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001ca0  08001ca0  00011ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001ca4  08001ca4  00011ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000001c  20000000  08001ca8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000038  2000001c  08001cc4  0002001c  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000054  08001cc4  00020054  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00004c01  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000eb9  00000000  00000000  00024c46  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000005f8  00000000  00000000  00025b00  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000550  00000000  00000000  000260f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000210d  00000000  00000000  00026648  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000020d6  00000000  00000000  00028755  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  0002a82b  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001890  00000000  00000000  0002a8ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0002c13c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000001c 	.word	0x2000001c
 8000158:	00000000 	.word	0x00000000
 800015c:	08001c7c 	.word	0x08001c7c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000020 	.word	0x20000020
 8000178:	08001c7c 	.word	0x08001c7c

0800017c <__aeabi_frsub>:
 800017c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000180:	e002      	b.n	8000188 <__addsf3>
 8000182:	bf00      	nop

08000184 <__aeabi_fsub>:
 8000184:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000188 <__addsf3>:
 8000188:	0042      	lsls	r2, r0, #1
 800018a:	bf1f      	itttt	ne
 800018c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000190:	ea92 0f03 	teqne	r2, r3
 8000194:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000198:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800019c:	d06a      	beq.n	8000274 <__addsf3+0xec>
 800019e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001a2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001a6:	bfc1      	itttt	gt
 80001a8:	18d2      	addgt	r2, r2, r3
 80001aa:	4041      	eorgt	r1, r0
 80001ac:	4048      	eorgt	r0, r1
 80001ae:	4041      	eorgt	r1, r0
 80001b0:	bfb8      	it	lt
 80001b2:	425b      	neglt	r3, r3
 80001b4:	2b19      	cmp	r3, #25
 80001b6:	bf88      	it	hi
 80001b8:	4770      	bxhi	lr
 80001ba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001c6:	bf18      	it	ne
 80001c8:	4240      	negne	r0, r0
 80001ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001d2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001d6:	bf18      	it	ne
 80001d8:	4249      	negne	r1, r1
 80001da:	ea92 0f03 	teq	r2, r3
 80001de:	d03f      	beq.n	8000260 <__addsf3+0xd8>
 80001e0:	f1a2 0201 	sub.w	r2, r2, #1
 80001e4:	fa41 fc03 	asr.w	ip, r1, r3
 80001e8:	eb10 000c 	adds.w	r0, r0, ip
 80001ec:	f1c3 0320 	rsb	r3, r3, #32
 80001f0:	fa01 f103 	lsl.w	r1, r1, r3
 80001f4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001f8:	d502      	bpl.n	8000200 <__addsf3+0x78>
 80001fa:	4249      	negs	r1, r1
 80001fc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000200:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000204:	d313      	bcc.n	800022e <__addsf3+0xa6>
 8000206:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800020a:	d306      	bcc.n	800021a <__addsf3+0x92>
 800020c:	0840      	lsrs	r0, r0, #1
 800020e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000212:	f102 0201 	add.w	r2, r2, #1
 8000216:	2afe      	cmp	r2, #254	; 0xfe
 8000218:	d251      	bcs.n	80002be <__addsf3+0x136>
 800021a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800021e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000222:	bf08      	it	eq
 8000224:	f020 0001 	biceq.w	r0, r0, #1
 8000228:	ea40 0003 	orr.w	r0, r0, r3
 800022c:	4770      	bx	lr
 800022e:	0049      	lsls	r1, r1, #1
 8000230:	eb40 0000 	adc.w	r0, r0, r0
 8000234:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000238:	f1a2 0201 	sub.w	r2, r2, #1
 800023c:	d1ed      	bne.n	800021a <__addsf3+0x92>
 800023e:	fab0 fc80 	clz	ip, r0
 8000242:	f1ac 0c08 	sub.w	ip, ip, #8
 8000246:	ebb2 020c 	subs.w	r2, r2, ip
 800024a:	fa00 f00c 	lsl.w	r0, r0, ip
 800024e:	bfaa      	itet	ge
 8000250:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000254:	4252      	neglt	r2, r2
 8000256:	4318      	orrge	r0, r3
 8000258:	bfbc      	itt	lt
 800025a:	40d0      	lsrlt	r0, r2
 800025c:	4318      	orrlt	r0, r3
 800025e:	4770      	bx	lr
 8000260:	f092 0f00 	teq	r2, #0
 8000264:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000268:	bf06      	itte	eq
 800026a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800026e:	3201      	addeq	r2, #1
 8000270:	3b01      	subne	r3, #1
 8000272:	e7b5      	b.n	80001e0 <__addsf3+0x58>
 8000274:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000278:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800027c:	bf18      	it	ne
 800027e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000282:	d021      	beq.n	80002c8 <__addsf3+0x140>
 8000284:	ea92 0f03 	teq	r2, r3
 8000288:	d004      	beq.n	8000294 <__addsf3+0x10c>
 800028a:	f092 0f00 	teq	r2, #0
 800028e:	bf08      	it	eq
 8000290:	4608      	moveq	r0, r1
 8000292:	4770      	bx	lr
 8000294:	ea90 0f01 	teq	r0, r1
 8000298:	bf1c      	itt	ne
 800029a:	2000      	movne	r0, #0
 800029c:	4770      	bxne	lr
 800029e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002a2:	d104      	bne.n	80002ae <__addsf3+0x126>
 80002a4:	0040      	lsls	r0, r0, #1
 80002a6:	bf28      	it	cs
 80002a8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002ac:	4770      	bx	lr
 80002ae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002b2:	bf3c      	itt	cc
 80002b4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002b8:	4770      	bxcc	lr
 80002ba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002be:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c6:	4770      	bx	lr
 80002c8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002cc:	bf16      	itet	ne
 80002ce:	4608      	movne	r0, r1
 80002d0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002d4:	4601      	movne	r1, r0
 80002d6:	0242      	lsls	r2, r0, #9
 80002d8:	bf06      	itte	eq
 80002da:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002de:	ea90 0f01 	teqeq	r0, r1
 80002e2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_ui2f>:
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e004      	b.n	80002f8 <__aeabi_i2f+0x8>
 80002ee:	bf00      	nop

080002f0 <__aeabi_i2f>:
 80002f0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002f4:	bf48      	it	mi
 80002f6:	4240      	negmi	r0, r0
 80002f8:	ea5f 0c00 	movs.w	ip, r0
 80002fc:	bf08      	it	eq
 80002fe:	4770      	bxeq	lr
 8000300:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000304:	4601      	mov	r1, r0
 8000306:	f04f 0000 	mov.w	r0, #0
 800030a:	e01c      	b.n	8000346 <__aeabi_l2f+0x2a>

0800030c <__aeabi_ul2f>:
 800030c:	ea50 0201 	orrs.w	r2, r0, r1
 8000310:	bf08      	it	eq
 8000312:	4770      	bxeq	lr
 8000314:	f04f 0300 	mov.w	r3, #0
 8000318:	e00a      	b.n	8000330 <__aeabi_l2f+0x14>
 800031a:	bf00      	nop

0800031c <__aeabi_l2f>:
 800031c:	ea50 0201 	orrs.w	r2, r0, r1
 8000320:	bf08      	it	eq
 8000322:	4770      	bxeq	lr
 8000324:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000328:	d502      	bpl.n	8000330 <__aeabi_l2f+0x14>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	ea5f 0c01 	movs.w	ip, r1
 8000334:	bf02      	ittt	eq
 8000336:	4684      	moveq	ip, r0
 8000338:	4601      	moveq	r1, r0
 800033a:	2000      	moveq	r0, #0
 800033c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000340:	bf08      	it	eq
 8000342:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000346:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800034a:	fabc f28c 	clz	r2, ip
 800034e:	3a08      	subs	r2, #8
 8000350:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000354:	db10      	blt.n	8000378 <__aeabi_l2f+0x5c>
 8000356:	fa01 fc02 	lsl.w	ip, r1, r2
 800035a:	4463      	add	r3, ip
 800035c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000368:	fa20 f202 	lsr.w	r2, r0, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	f020 0001 	biceq.w	r0, r0, #1
 8000376:	4770      	bx	lr
 8000378:	f102 0220 	add.w	r2, r2, #32
 800037c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000380:	f1c2 0220 	rsb	r2, r2, #32
 8000384:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000388:	fa21 f202 	lsr.w	r2, r1, r2
 800038c:	eb43 0002 	adc.w	r0, r3, r2
 8000390:	bf08      	it	eq
 8000392:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000396:	4770      	bx	lr

08000398 <__aeabi_fmul>:
 8000398:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800039c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003a0:	bf1e      	ittt	ne
 80003a2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003a6:	ea92 0f0c 	teqne	r2, ip
 80003aa:	ea93 0f0c 	teqne	r3, ip
 80003ae:	d06f      	beq.n	8000490 <__aeabi_fmul+0xf8>
 80003b0:	441a      	add	r2, r3
 80003b2:	ea80 0c01 	eor.w	ip, r0, r1
 80003b6:	0240      	lsls	r0, r0, #9
 80003b8:	bf18      	it	ne
 80003ba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003be:	d01e      	beq.n	80003fe <__aeabi_fmul+0x66>
 80003c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003c4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003c8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003cc:	fba0 3101 	umull	r3, r1, r0, r1
 80003d0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003d4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003d8:	bf3e      	ittt	cc
 80003da:	0049      	lslcc	r1, r1, #1
 80003dc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003e0:	005b      	lslcc	r3, r3, #1
 80003e2:	ea40 0001 	orr.w	r0, r0, r1
 80003e6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ea:	2afd      	cmp	r2, #253	; 0xfd
 80003ec:	d81d      	bhi.n	800042a <__aeabi_fmul+0x92>
 80003ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003f6:	bf08      	it	eq
 80003f8:	f020 0001 	biceq.w	r0, r0, #1
 80003fc:	4770      	bx	lr
 80003fe:	f090 0f00 	teq	r0, #0
 8000402:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000406:	bf08      	it	eq
 8000408:	0249      	lsleq	r1, r1, #9
 800040a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800040e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000412:	3a7f      	subs	r2, #127	; 0x7f
 8000414:	bfc2      	ittt	gt
 8000416:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800041a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800041e:	4770      	bxgt	lr
 8000420:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000424:	f04f 0300 	mov.w	r3, #0
 8000428:	3a01      	subs	r2, #1
 800042a:	dc5d      	bgt.n	80004e8 <__aeabi_fmul+0x150>
 800042c:	f112 0f19 	cmn.w	r2, #25
 8000430:	bfdc      	itt	le
 8000432:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000436:	4770      	bxle	lr
 8000438:	f1c2 0200 	rsb	r2, r2, #0
 800043c:	0041      	lsls	r1, r0, #1
 800043e:	fa21 f102 	lsr.w	r1, r1, r2
 8000442:	f1c2 0220 	rsb	r2, r2, #32
 8000446:	fa00 fc02 	lsl.w	ip, r0, r2
 800044a:	ea5f 0031 	movs.w	r0, r1, rrx
 800044e:	f140 0000 	adc.w	r0, r0, #0
 8000452:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000456:	bf08      	it	eq
 8000458:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800045c:	4770      	bx	lr
 800045e:	f092 0f00 	teq	r2, #0
 8000462:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000466:	bf02      	ittt	eq
 8000468:	0040      	lsleq	r0, r0, #1
 800046a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800046e:	3a01      	subeq	r2, #1
 8000470:	d0f9      	beq.n	8000466 <__aeabi_fmul+0xce>
 8000472:	ea40 000c 	orr.w	r0, r0, ip
 8000476:	f093 0f00 	teq	r3, #0
 800047a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800047e:	bf02      	ittt	eq
 8000480:	0049      	lsleq	r1, r1, #1
 8000482:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000486:	3b01      	subeq	r3, #1
 8000488:	d0f9      	beq.n	800047e <__aeabi_fmul+0xe6>
 800048a:	ea41 010c 	orr.w	r1, r1, ip
 800048e:	e78f      	b.n	80003b0 <__aeabi_fmul+0x18>
 8000490:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000494:	ea92 0f0c 	teq	r2, ip
 8000498:	bf18      	it	ne
 800049a:	ea93 0f0c 	teqne	r3, ip
 800049e:	d00a      	beq.n	80004b6 <__aeabi_fmul+0x11e>
 80004a0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004a4:	bf18      	it	ne
 80004a6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004aa:	d1d8      	bne.n	800045e <__aeabi_fmul+0xc6>
 80004ac:	ea80 0001 	eor.w	r0, r0, r1
 80004b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004b4:	4770      	bx	lr
 80004b6:	f090 0f00 	teq	r0, #0
 80004ba:	bf17      	itett	ne
 80004bc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004c0:	4608      	moveq	r0, r1
 80004c2:	f091 0f00 	teqne	r1, #0
 80004c6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004ca:	d014      	beq.n	80004f6 <__aeabi_fmul+0x15e>
 80004cc:	ea92 0f0c 	teq	r2, ip
 80004d0:	d101      	bne.n	80004d6 <__aeabi_fmul+0x13e>
 80004d2:	0242      	lsls	r2, r0, #9
 80004d4:	d10f      	bne.n	80004f6 <__aeabi_fmul+0x15e>
 80004d6:	ea93 0f0c 	teq	r3, ip
 80004da:	d103      	bne.n	80004e4 <__aeabi_fmul+0x14c>
 80004dc:	024b      	lsls	r3, r1, #9
 80004de:	bf18      	it	ne
 80004e0:	4608      	movne	r0, r1
 80004e2:	d108      	bne.n	80004f6 <__aeabi_fmul+0x15e>
 80004e4:	ea80 0001 	eor.w	r0, r0, r1
 80004e8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004ec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004f4:	4770      	bx	lr
 80004f6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004fa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004fe:	4770      	bx	lr

08000500 <__aeabi_fdiv>:
 8000500:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000504:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000508:	bf1e      	ittt	ne
 800050a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800050e:	ea92 0f0c 	teqne	r2, ip
 8000512:	ea93 0f0c 	teqne	r3, ip
 8000516:	d069      	beq.n	80005ec <__aeabi_fdiv+0xec>
 8000518:	eba2 0203 	sub.w	r2, r2, r3
 800051c:	ea80 0c01 	eor.w	ip, r0, r1
 8000520:	0249      	lsls	r1, r1, #9
 8000522:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000526:	d037      	beq.n	8000598 <__aeabi_fdiv+0x98>
 8000528:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800052c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000530:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000534:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000538:	428b      	cmp	r3, r1
 800053a:	bf38      	it	cc
 800053c:	005b      	lslcc	r3, r3, #1
 800053e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000542:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000546:	428b      	cmp	r3, r1
 8000548:	bf24      	itt	cs
 800054a:	1a5b      	subcs	r3, r3, r1
 800054c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000550:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000554:	bf24      	itt	cs
 8000556:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800055a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800055e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000562:	bf24      	itt	cs
 8000564:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000568:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800056c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000570:	bf24      	itt	cs
 8000572:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000576:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800057a:	011b      	lsls	r3, r3, #4
 800057c:	bf18      	it	ne
 800057e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000582:	d1e0      	bne.n	8000546 <__aeabi_fdiv+0x46>
 8000584:	2afd      	cmp	r2, #253	; 0xfd
 8000586:	f63f af50 	bhi.w	800042a <__aeabi_fmul+0x92>
 800058a:	428b      	cmp	r3, r1
 800058c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000590:	bf08      	it	eq
 8000592:	f020 0001 	biceq.w	r0, r0, #1
 8000596:	4770      	bx	lr
 8000598:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800059c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80005a0:	327f      	adds	r2, #127	; 0x7f
 80005a2:	bfc2      	ittt	gt
 80005a4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80005a8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005ac:	4770      	bxgt	lr
 80005ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005b2:	f04f 0300 	mov.w	r3, #0
 80005b6:	3a01      	subs	r2, #1
 80005b8:	e737      	b.n	800042a <__aeabi_fmul+0x92>
 80005ba:	f092 0f00 	teq	r2, #0
 80005be:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005c2:	bf02      	ittt	eq
 80005c4:	0040      	lsleq	r0, r0, #1
 80005c6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005ca:	3a01      	subeq	r2, #1
 80005cc:	d0f9      	beq.n	80005c2 <__aeabi_fdiv+0xc2>
 80005ce:	ea40 000c 	orr.w	r0, r0, ip
 80005d2:	f093 0f00 	teq	r3, #0
 80005d6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005da:	bf02      	ittt	eq
 80005dc:	0049      	lsleq	r1, r1, #1
 80005de:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005e2:	3b01      	subeq	r3, #1
 80005e4:	d0f9      	beq.n	80005da <__aeabi_fdiv+0xda>
 80005e6:	ea41 010c 	orr.w	r1, r1, ip
 80005ea:	e795      	b.n	8000518 <__aeabi_fdiv+0x18>
 80005ec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005f0:	ea92 0f0c 	teq	r2, ip
 80005f4:	d108      	bne.n	8000608 <__aeabi_fdiv+0x108>
 80005f6:	0242      	lsls	r2, r0, #9
 80005f8:	f47f af7d 	bne.w	80004f6 <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	f47f af70 	bne.w	80004e4 <__aeabi_fmul+0x14c>
 8000604:	4608      	mov	r0, r1
 8000606:	e776      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000608:	ea93 0f0c 	teq	r3, ip
 800060c:	d104      	bne.n	8000618 <__aeabi_fdiv+0x118>
 800060e:	024b      	lsls	r3, r1, #9
 8000610:	f43f af4c 	beq.w	80004ac <__aeabi_fmul+0x114>
 8000614:	4608      	mov	r0, r1
 8000616:	e76e      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000618:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800061c:	bf18      	it	ne
 800061e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000622:	d1ca      	bne.n	80005ba <__aeabi_fdiv+0xba>
 8000624:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000628:	f47f af5c 	bne.w	80004e4 <__aeabi_fmul+0x14c>
 800062c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000630:	f47f af3c 	bne.w	80004ac <__aeabi_fmul+0x114>
 8000634:	e75f      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000636:	bf00      	nop

08000638 <__aeabi_f2uiz>:
 8000638:	0042      	lsls	r2, r0, #1
 800063a:	d20e      	bcs.n	800065a <__aeabi_f2uiz+0x22>
 800063c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000640:	d30b      	bcc.n	800065a <__aeabi_f2uiz+0x22>
 8000642:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000646:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800064a:	d409      	bmi.n	8000660 <__aeabi_f2uiz+0x28>
 800064c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000650:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000654:	fa23 f002 	lsr.w	r0, r3, r2
 8000658:	4770      	bx	lr
 800065a:	f04f 0000 	mov.w	r0, #0
 800065e:	4770      	bx	lr
 8000660:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000664:	d101      	bne.n	800066a <__aeabi_f2uiz+0x32>
 8000666:	0242      	lsls	r2, r0, #9
 8000668:	d102      	bne.n	8000670 <__aeabi_f2uiz+0x38>
 800066a:	f04f 30ff 	mov.w	r0, #4294967295
 800066e:	4770      	bx	lr
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for preemption priority.
  *                                0 bits for subpriority.
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000680:	4a05      	ldr	r2, [pc, #20]	; (8000698 <NVIC_PriorityGroupConfig+0x20>)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800068c:	60d3      	str	r3, [r2, #12]
}
 800068e:	bf00      	nop
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800069c:	b480      	push	{r7}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80006a4:	2300      	movs	r3, #0
 80006a6:	73fb      	strb	r3, [r7, #15]
 80006a8:	2300      	movs	r3, #0
 80006aa:	73bb      	strb	r3, [r7, #14]
 80006ac:	230f      	movs	r3, #15
 80006ae:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	78db      	ldrb	r3, [r3, #3]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d038      	beq.n	800072a <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80006b8:	4b26      	ldr	r3, [pc, #152]	; (8000754 <NVIC_Init+0xb8>)
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	43db      	mvns	r3, r3
 80006be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80006c2:	0a1b      	lsrs	r3, r3, #8
 80006c4:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	f1c3 0304 	rsb	r3, r3, #4
 80006cc:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80006ce:	7b7a      	ldrb	r2, [r7, #13]
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
 80006d2:	fa42 f303 	asr.w	r3, r2, r3
 80006d6:	737b      	strb	r3, [r7, #13]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	785b      	ldrb	r3, [r3, #1]
 80006dc:	461a      	mov	r2, r3
 80006de:	7bbb      	ldrb	r3, [r7, #14]
 80006e0:	fa02 f303 	lsl.w	r3, r2, r3
 80006e4:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	789a      	ldrb	r2, [r3, #2]
 80006ea:	7b7b      	ldrb	r3, [r7, #13]
 80006ec:	4013      	ands	r3, r2
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
 80006f2:	4313      	orrs	r3, r2
 80006f4:	73fb      	strb	r3, [r7, #15]
    tmppriority = tmppriority << 0x04;
 80006f6:	7bfb      	ldrb	r3, [r7, #15]
 80006f8:	011b      	lsls	r3, r3, #4
 80006fa:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80006fc:	4a16      	ldr	r2, [pc, #88]	; (8000758 <NVIC_Init+0xbc>)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	4413      	add	r3, r2
 8000704:	7bfa      	ldrb	r2, [r7, #15]
 8000706:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800070a:	4a13      	ldr	r2, [pc, #76]	; (8000758 <NVIC_Init+0xbc>)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	095b      	lsrs	r3, r3, #5
 8000712:	b2db      	uxtb	r3, r3
 8000714:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	f003 031f 	and.w	r3, r3, #31
 800071e:	2101      	movs	r1, #1
 8000720:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000724:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000728:	e00f      	b.n	800074a <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800072a:	490b      	ldr	r1, [pc, #44]	; (8000758 <NVIC_Init+0xbc>)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	095b      	lsrs	r3, r3, #5
 8000732:	b2db      	uxtb	r3, r3
 8000734:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	f003 031f 	and.w	r3, r3, #31
 800073e:	2201      	movs	r2, #1
 8000740:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000742:	f100 0320 	add.w	r3, r0, #32
 8000746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800074a:	bf00      	nop
 800074c:	3714      	adds	r7, #20
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr
 8000754:	e000ed00 	.word	0xe000ed00
 8000758:	e000e100 	.word	0xe000e100

0800075c <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains 
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)               
{
 800075c:	b480      	push	{r7}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	685b      	ldr	r3, [r3, #4]
 8000772:	60fb      	str	r3, [r7, #12]
  /* Clear RES and SCAN bits */ 
  tmpreg1 &= CR1_CLEAR_MASK;
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800077a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800077e:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | ADC_InitStruct->ADC_Resolution);
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	791b      	ldrb	r3, [r3, #4]
 8000784:	021a      	lsls	r2, r3, #8
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4313      	orrs	r3, r2
 800078c:	68fa      	ldr	r2, [r7, #12]
 800078e:	4313      	orrs	r3, r2
 8000790:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	68fa      	ldr	r2, [r7, #12]
 8000796:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	689b      	ldr	r3, [r3, #8]
 800079c:	60fb      	str	r3, [r7, #12]
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 800079e:	68fa      	ldr	r2, [r7, #12]
 80007a0:	4b17      	ldr	r3, [pc, #92]	; (8000800 <ADC_Init+0xa4>)
 80007a2:	4013      	ands	r3, r2
 80007a4:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	691a      	ldr	r2, [r3, #16]
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	68db      	ldr	r3, [r3, #12]
 80007ae:	431a      	orrs	r2, r3
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	689b      	ldr	r3, [r3, #8]
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 80007b4:	431a      	orrs	r2, r3
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	795b      	ldrb	r3, [r3, #5]
 80007ba:	005b      	lsls	r3, r3, #1
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 80007bc:	4313      	orrs	r3, r2
 80007be:	68fa      	ldr	r2, [r7, #12]
 80007c0:	4313      	orrs	r3, r2
 80007c2:	60fb      	str	r3, [r7, #12]
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	68fa      	ldr	r2, [r7, #12]
 80007c8:	609a      	str	r2, [r3, #8]
  
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	f023 73f8 	bic.w	r3, r3, #32505856	; 0x1f00000
 80007d6:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */ 
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	7d1b      	ldrb	r3, [r3, #20]
 80007dc:	3b01      	subs	r3, #1
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	7afb      	ldrb	r3, [r7, #11]
 80007e2:	4313      	orrs	r3, r2
 80007e4:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 80007e6:	7afb      	ldrb	r3, [r7, #11]
 80007e8:	051b      	lsls	r3, r3, #20
 80007ea:	68fa      	ldr	r2, [r7, #12]
 80007ec:	4313      	orrs	r3, r2
 80007ee:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	68fa      	ldr	r2, [r7, #12]
 80007f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80007f6:	bf00      	nop
 80007f8:	3714      	adds	r7, #20
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bc80      	pop	{r7}
 80007fe:	4770      	bx	lr
 8000800:	c0fff7fd 	.word	0xc0fff7fd

08000804 <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)                            
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Resolution member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]

  /* Initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2200      	movs	r2, #0
 8000816:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2200      	movs	r2, #0
 800081c:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T2_CC2;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 800082a:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2201      	movs	r2, #1
 8000836:	751a      	strb	r2, [r3, #20]
}
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop

08000844 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	460b      	mov	r3, r1
 800084e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000850:	78fb      	ldrb	r3, [r7, #3]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d006      	beq.n	8000864 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	689b      	ldr	r3, [r3, #8]
 800085a:	f043 0201 	orr.w	r2, r3, #1
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 8000862:	e005      	b.n	8000870 <ADC_Cmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	689b      	ldr	r3, [r3, #8]
 8000868:	f023 0201 	bic.w	r2, r3, #1
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	609a      	str	r2, [r3, #8]
  }
}
 8000870:	bf00      	nop
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	bc80      	pop	{r7}
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop

0800087c <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_192Cycles: Sample time equal to 192 cycles	
  *     @arg ADC_SampleTime_384Cycles: Sample time equal to 384 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	4608      	mov	r0, r1
 8000886:	4611      	mov	r1, r2
 8000888:	461a      	mov	r2, r3
 800088a:	4603      	mov	r3, r0
 800088c:	70fb      	strb	r3, [r7, #3]
 800088e:	460b      	mov	r3, r1
 8000890:	70bb      	strb	r3, [r7, #2]
 8000892:	4613      	mov	r3, r2
 8000894:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	2300      	movs	r3, #0
 800089c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* If ADC_Channel_30 or ADC_Channel_31 is selected */
  if (ADC_Channel > ADC_Channel_29)
 800089e:	78fb      	ldrb	r3, [r7, #3]
 80008a0:	2b1d      	cmp	r3, #29
 80008a2:	d923      	bls.n	80008ec <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR0;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008a8:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR0_SMP_SET << (3 * (ADC_Channel - 30));
 80008aa:	78fb      	ldrb	r3, [r7, #3]
 80008ac:	f1a3 021e 	sub.w	r2, r3, #30
 80008b0:	4613      	mov	r3, r2
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	4413      	add	r3, r2
 80008b6:	2207      	movs	r2, #7
 80008b8:	fa02 f303 	lsl.w	r3, r2, r3
 80008bc:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	43db      	mvns	r3, r3
 80008c2:	68fa      	ldr	r2, [r7, #12]
 80008c4:	4013      	ands	r3, r2
 80008c6:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 30));
 80008c8:	7879      	ldrb	r1, [r7, #1]
 80008ca:	78fb      	ldrb	r3, [r7, #3]
 80008cc:	f1a3 021e 	sub.w	r2, r3, #30
 80008d0:	4613      	mov	r3, r2
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	4413      	add	r3, r2
 80008d6:	fa01 f303 	lsl.w	r3, r1, r3
 80008da:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80008dc:	68fa      	ldr	r2, [r7, #12]
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	4313      	orrs	r3, r2
 80008e2:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR0 = tmpreg1;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	68fa      	ldr	r2, [r7, #12]
 80008e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80008ea:	e06c      	b.n	80009c6 <ADC_RegularChannelConfig+0x14a>
  }
  /* If ADC_Channel_20 ... ADC_Channel_29 is selected */
  else if (ADC_Channel > ADC_Channel_19)
 80008ec:	78fb      	ldrb	r3, [r7, #3]
 80008ee:	2b13      	cmp	r3, #19
 80008f0:	d923      	bls.n	800093a <ADC_RegularChannelConfig+0xbe>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	68db      	ldr	r3, [r3, #12]
 80008f6:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 20));
 80008f8:	78fb      	ldrb	r3, [r7, #3]
 80008fa:	f1a3 0214 	sub.w	r2, r3, #20
 80008fe:	4613      	mov	r3, r2
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	4413      	add	r3, r2
 8000904:	2207      	movs	r2, #7
 8000906:	fa02 f303 	lsl.w	r3, r2, r3
 800090a:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	43db      	mvns	r3, r3
 8000910:	68fa      	ldr	r2, [r7, #12]
 8000912:	4013      	ands	r3, r2
 8000914:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 20));
 8000916:	7879      	ldrb	r1, [r7, #1]
 8000918:	78fb      	ldrb	r3, [r7, #3]
 800091a:	f1a3 0214 	sub.w	r2, r3, #20
 800091e:	4613      	mov	r3, r2
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	4413      	add	r3, r2
 8000924:	fa01 f303 	lsl.w	r3, r1, r3
 8000928:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800092a:	68fa      	ldr	r2, [r7, #12]
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	4313      	orrs	r3, r2
 8000930:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	68fa      	ldr	r2, [r7, #12]
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	e045      	b.n	80009c6 <ADC_RegularChannelConfig+0x14a>
  }
  /* If ADC_Channel_10 ... ADC_Channel_19 is selected */
  else if (ADC_Channel > ADC_Channel_9)
 800093a:	78fb      	ldrb	r3, [r7, #3]
 800093c:	2b09      	cmp	r3, #9
 800093e:	d923      	bls.n	8000988 <ADC_RegularChannelConfig+0x10c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	691b      	ldr	r3, [r3, #16]
 8000944:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * (ADC_Channel - 10));
 8000946:	78fb      	ldrb	r3, [r7, #3]
 8000948:	f1a3 020a 	sub.w	r2, r3, #10
 800094c:	4613      	mov	r3, r2
 800094e:	005b      	lsls	r3, r3, #1
 8000950:	4413      	add	r3, r2
 8000952:	2207      	movs	r2, #7
 8000954:	fa02 f303 	lsl.w	r3, r2, r3
 8000958:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	43db      	mvns	r3, r3
 800095e:	68fa      	ldr	r2, [r7, #12]
 8000960:	4013      	ands	r3, r2
 8000962:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000964:	7879      	ldrb	r1, [r7, #1]
 8000966:	78fb      	ldrb	r3, [r7, #3]
 8000968:	f1a3 020a 	sub.w	r2, r3, #10
 800096c:	4613      	mov	r3, r2
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	4413      	add	r3, r2
 8000972:	fa01 f303 	lsl.w	r3, r1, r3
 8000976:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000978:	68fa      	ldr	r2, [r7, #12]
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	4313      	orrs	r3, r2
 800097e:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	68fa      	ldr	r2, [r7, #12]
 8000984:	611a      	str	r2, [r3, #16]
 8000986:	e01e      	b.n	80009c6 <ADC_RegularChannelConfig+0x14a>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR3;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	695b      	ldr	r3, [r3, #20]
 800098c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR3_SMP_SET << (3 * ADC_Channel);
 800098e:	78fa      	ldrb	r2, [r7, #3]
 8000990:	4613      	mov	r3, r2
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	4413      	add	r3, r2
 8000996:	2207      	movs	r2, #7
 8000998:	fa02 f303 	lsl.w	r3, r2, r3
 800099c:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	43db      	mvns	r3, r3
 80009a2:	68fa      	ldr	r2, [r7, #12]
 80009a4:	4013      	ands	r3, r2
 80009a6:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 80009a8:	7879      	ldrb	r1, [r7, #1]
 80009aa:	78fa      	ldrb	r2, [r7, #3]
 80009ac:	4613      	mov	r3, r2
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	4413      	add	r3, r2
 80009b2:	fa01 f303 	lsl.w	r3, r1, r3
 80009b6:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80009b8:	68fa      	ldr	r2, [r7, #12]
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	4313      	orrs	r3, r2
 80009be:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR3 = tmpreg1;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	68fa      	ldr	r2, [r7, #12]
 80009c4:	615a      	str	r2, [r3, #20]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80009c6:	78bb      	ldrb	r3, [r7, #2]
 80009c8:	2b06      	cmp	r3, #6
 80009ca:	d821      	bhi.n	8000a10 <ADC_RegularChannelConfig+0x194>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR5;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR5_SQ_SET << (5 * (Rank - 1));
 80009d2:	78bb      	ldrb	r3, [r7, #2]
 80009d4:	1e5a      	subs	r2, r3, #1
 80009d6:	4613      	mov	r3, r2
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	4413      	add	r3, r2
 80009dc:	221f      	movs	r2, #31
 80009de:	fa02 f303 	lsl.w	r3, r2, r3
 80009e2:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	43db      	mvns	r3, r3
 80009e8:	68fa      	ldr	r2, [r7, #12]
 80009ea:	4013      	ands	r3, r2
 80009ec:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 80009ee:	78f9      	ldrb	r1, [r7, #3]
 80009f0:	78bb      	ldrb	r3, [r7, #2]
 80009f2:	1e5a      	subs	r2, r3, #1
 80009f4:	4613      	mov	r3, r2
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	4413      	add	r3, r2
 80009fa:	fa01 f303 	lsl.w	r3, r1, r3
 80009fe:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000a00:	68fa      	ldr	r2, [r7, #12]
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	4313      	orrs	r3, r2
 8000a06:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR5 = tmpreg1;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	68fa      	ldr	r2, [r7, #12]
 8000a0c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000a0e:	e095      	b.n	8000b3c <ADC_RegularChannelConfig+0x2c0>
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR5 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8000a10:	78bb      	ldrb	r3, [r7, #2]
 8000a12:	2b0c      	cmp	r3, #12
 8000a14:	d821      	bhi.n	8000a5a <ADC_RegularChannelConfig+0x1de>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR4;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a1a:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR4_SQ_SET << (5 * (Rank - 7));
 8000a1c:	78bb      	ldrb	r3, [r7, #2]
 8000a1e:	1fda      	subs	r2, r3, #7
 8000a20:	4613      	mov	r3, r2
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	4413      	add	r3, r2
 8000a26:	221f      	movs	r2, #31
 8000a28:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2c:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	43db      	mvns	r3, r3
 8000a32:	68fa      	ldr	r2, [r7, #12]
 8000a34:	4013      	ands	r3, r2
 8000a36:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8000a38:	78f9      	ldrb	r1, [r7, #3]
 8000a3a:	78bb      	ldrb	r3, [r7, #2]
 8000a3c:	1fda      	subs	r2, r3, #7
 8000a3e:	4613      	mov	r3, r2
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	4413      	add	r3, r2
 8000a44:	fa01 f303 	lsl.w	r3, r1, r3
 8000a48:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000a4a:	68fa      	ldr	r2, [r7, #12]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	68fa      	ldr	r2, [r7, #12]
 8000a56:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000a58:	e070      	b.n	8000b3c <ADC_RegularChannelConfig+0x2c0>
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
  }  
  /* For Rank 13 to 18 */
  else if (Rank < 19)
 8000a5a:	78bb      	ldrb	r3, [r7, #2]
 8000a5c:	2b12      	cmp	r3, #18
 8000a5e:	d823      	bhi.n	8000aa8 <ADC_RegularChannelConfig+0x22c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a64:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 13));
 8000a66:	78bb      	ldrb	r3, [r7, #2]
 8000a68:	f1a3 020d 	sub.w	r2, r3, #13
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	4413      	add	r3, r2
 8000a72:	221f      	movs	r2, #31
 8000a74:	fa02 f303 	lsl.w	r3, r2, r3
 8000a78:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	68fa      	ldr	r2, [r7, #12]
 8000a80:	4013      	ands	r3, r2
 8000a82:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000a84:	78f9      	ldrb	r1, [r7, #3]
 8000a86:	78bb      	ldrb	r3, [r7, #2]
 8000a88:	f1a3 020d 	sub.w	r2, r3, #13
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	4413      	add	r3, r2
 8000a92:	fa01 f303 	lsl.w	r3, r1, r3
 8000a96:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000a98:	68fa      	ldr	r2, [r7, #12]
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	68fa      	ldr	r2, [r7, #12]
 8000aa4:	639a      	str	r2, [r3, #56]	; 0x38
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000aa6:	e049      	b.n	8000b3c <ADC_RegularChannelConfig+0x2c0>
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
    
  /* For Rank 19 to 24 */
  else if (Rank < 25)
 8000aa8:	78bb      	ldrb	r3, [r7, #2]
 8000aaa:	2b18      	cmp	r3, #24
 8000aac:	d823      	bhi.n	8000af6 <ADC_RegularChannelConfig+0x27a>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ab2:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 19));
 8000ab4:	78bb      	ldrb	r3, [r7, #2]
 8000ab6:	f1a3 0213 	sub.w	r2, r3, #19
 8000aba:	4613      	mov	r3, r2
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	4413      	add	r3, r2
 8000ac0:	221f      	movs	r2, #31
 8000ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac6:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	43db      	mvns	r3, r3
 8000acc:	68fa      	ldr	r2, [r7, #12]
 8000ace:	4013      	ands	r3, r2
 8000ad0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 19));
 8000ad2:	78f9      	ldrb	r1, [r7, #3]
 8000ad4:	78bb      	ldrb	r3, [r7, #2]
 8000ad6:	f1a3 0213 	sub.w	r2, r3, #19
 8000ada:	4613      	mov	r3, r2
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	4413      	add	r3, r2
 8000ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae4:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000ae6:	68fa      	ldr	r2, [r7, #12]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	4313      	orrs	r3, r2
 8000aec:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	68fa      	ldr	r2, [r7, #12]
 8000af2:	635a      	str	r2, [r3, #52]	; 0x34
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000af4:	e022      	b.n	8000b3c <ADC_RegularChannelConfig+0x2c0>
  
  /* For Rank 25 to 28 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 25));
 8000afc:	78bb      	ldrb	r3, [r7, #2]
 8000afe:	f1a3 0219 	sub.w	r2, r3, #25
 8000b02:	4613      	mov	r3, r2
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	4413      	add	r3, r2
 8000b08:	221f      	movs	r2, #31
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	43db      	mvns	r3, r3
 8000b14:	68fa      	ldr	r2, [r7, #12]
 8000b16:	4013      	ands	r3, r2
 8000b18:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 25));
 8000b1a:	78f9      	ldrb	r1, [r7, #3]
 8000b1c:	78bb      	ldrb	r3, [r7, #2]
 8000b1e:	f1a3 0219 	sub.w	r2, r3, #25
 8000b22:	4613      	mov	r3, r2
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	4413      	add	r3, r2
 8000b28:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2c:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000b2e:	68fa      	ldr	r2, [r7, #12]
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	68fa      	ldr	r2, [r7, #12]
 8000b3a:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 8000b3c:	bf00      	nop
 8000b3e:	3714      	adds	r7, #20
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bc80      	pop	{r7}
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1 to select the ADC1 peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bc80      	pop	{r7}
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <ADC_ITConfig>:
  * @param  NewState: new state of the specified ADC interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)  
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	460b      	mov	r3, r1
 8000b72:	807b      	strh	r3, [r7, #2]
 8000b74:	4613      	mov	r3, r2
 8000b76:	707b      	strb	r3, [r7, #1]
  uint32_t itmask = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT)); 

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
 8000b7c:	887b      	ldrh	r3, [r7, #2]
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	60fb      	str	r3, [r7, #12]
  itmask = (uint32_t)0x01 << itmask;    
 8000b82:	2201      	movs	r2, #1
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8a:	60fb      	str	r3, [r7, #12]

  if (NewState != DISABLE)
 8000b8c:	787b      	ldrb	r3, [r7, #1]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d006      	beq.n	8000ba0 <ADC_ITConfig+0x38>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	685a      	ldr	r2, [r3, #4]
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	431a      	orrs	r2, r3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
  }
}
 8000b9e:	e006      	b.n	8000bae <ADC_ITConfig+0x46>
    ADCx->CR1 |= itmask;
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	685a      	ldr	r2, [r3, #4]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	43db      	mvns	r3, r3
 8000ba8:	401a      	ands	r2, r3
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	605a      	str	r2, [r3, #4]
  }
}
 8000bae:	bf00      	nop
 8000bb0:	3714      	adds	r7, #20
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bc80      	pop	{r7}
 8000bb6:	4770      	bx	lr

08000bb8 <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_RCNR: Regular channel not ready
  *     @arg ADC_FLAG_JCNR: Injected channel not ready
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint16_t ADC_FLAG)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	887b      	ldrh	r3, [r7, #2]
 8000bce:	4013      	ands	r3, r2
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d002      	beq.n	8000bda <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	73fb      	strb	r3, [r7, #15]
 8000bd8:	e001      	b.n	8000bde <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8000bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3714      	adds	r7, #20
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bc80      	pop	{r7}
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop

08000bec <GPIO_Init>:
  *         peripheral.

  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b087      	sub	sp, #28
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	617b      	str	r3, [r7, #20]
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]
 8000c06:	e07e      	b.n	8000d06 <GPIO_Init+0x11a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000c08:	2201      	movs	r2, #1
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c10:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	4013      	ands	r3, r2
 8000c1a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000c1c:	68fa      	ldr	r2, [r7, #12]
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d16d      	bne.n	8000d00 <GPIO_Init+0x114>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	2103      	movs	r1, #3
 8000c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c32:	43db      	mvns	r3, r3
 8000c34:	401a      	ands	r2, r3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	791b      	ldrb	r3, [r3, #4]
 8000c42:	4619      	mov	r1, r3
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4c:	431a      	orrs	r2, r3
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	791b      	ldrb	r3, [r3, #4]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d003      	beq.n	8000c62 <GPIO_Init+0x76>
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	791b      	ldrb	r3, [r3, #4]
 8000c5e:	2b02      	cmp	r3, #2
 8000c60:	d136      	bne.n	8000cd0 <GPIO_Init+0xe4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	689a      	ldr	r2, [r3, #8]
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	2103      	movs	r1, #3
 8000c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c70:	43db      	mvns	r3, r3
 8000c72:	401a      	ands	r2, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	689a      	ldr	r2, [r3, #8]
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	795b      	ldrb	r3, [r3, #5]
 8000c80:	4619      	mov	r1, r3
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8a:	431a      	orrs	r2, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	609a      	str	r2, [r3, #8]

        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	889b      	ldrh	r3, [r3, #4]
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	43db      	mvns	r3, r3
 8000ca4:	b29b      	uxth	r3, r3
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	b29a      	uxth	r2, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	889b      	ldrh	r3, [r3, #4]
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	b21a      	sxth	r2, r3
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	799b      	ldrb	r3, [r3, #6]
 8000cba:	4619      	mov	r1, r3
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc4:	b21b      	sxth	r3, r3
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	b21b      	sxth	r3, r3
 8000cca:	b29a      	uxth	r2, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	809a      	strh	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	68da      	ldr	r2, [r3, #12]
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	2103      	movs	r1, #3
 8000cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	401a      	ands	r2, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	68da      	ldr	r2, [r3, #12]
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	79db      	ldrb	r3, [r3, #7]
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfa:	431a      	orrs	r2, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	3301      	adds	r3, #1
 8000d04:	617b      	str	r3, [r7, #20]
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	2b0f      	cmp	r3, #15
 8000d0a:	f67f af7d 	bls.w	8000c08 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000d0e:	bf00      	nop
 8000d10:	371c      	adds	r7, #28
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr

08000d18 <GPIO_PinAFConfig>:
  *        alternate function I/O pins.  
  * @note EVENTOUT is not mapped on PH0, PH1 and PH2.  
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	460b      	mov	r3, r1
 8000d22:	807b      	strh	r3, [r7, #2]
 8000d24:	4613      	mov	r3, r2
 8000d26:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000d30:	787a      	ldrb	r2, [r7, #1]
 8000d32:	887b      	ldrh	r3, [r7, #2]
 8000d34:	f003 0307 	and.w	r3, r3, #7
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000d40:	887b      	ldrh	r3, [r7, #2]
 8000d42:	08db      	lsrs	r3, r3, #3
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	4618      	mov	r0, r3
 8000d48:	887b      	ldrh	r3, [r7, #2]
 8000d4a:	08db      	lsrs	r3, r3, #3
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	461a      	mov	r2, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3208      	adds	r2, #8
 8000d54:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d58:	887b      	ldrh	r3, [r7, #2]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	210f      	movs	r1, #15
 8000d62:	fa01 f303 	lsl.w	r3, r1, r3
 8000d66:	43db      	mvns	r3, r3
 8000d68:	ea02 0103 	and.w	r1, r2, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f100 0208 	add.w	r2, r0, #8
 8000d72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000d76:	887b      	ldrh	r3, [r7, #2]
 8000d78:	08db      	lsrs	r3, r3, #3
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	3208      	adds	r2, #8
 8000d82:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000d8c:	887b      	ldrh	r3, [r7, #2]
 8000d8e:	08db      	lsrs	r3, r3, #3
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	461a      	mov	r2, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3208      	adds	r2, #8
 8000d98:	68b9      	ldr	r1, [r7, #8]
 8000d9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000d9e:	bf00      	nop
 8000da0:	3714      	adds	r7, #20
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr

08000da8 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8000db2:	4a04      	ldr	r2, [pc, #16]	; (8000dc4 <RCC_HSICmd+0x1c>)
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	6013      	str	r3, [r2, #0]
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bc80      	pop	{r7}
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	42470000 	.word	0x42470000

08000dc8 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b089      	sub	sp, #36	; 0x24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, presc = 0, msirange = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61fb      	str	r3, [r7, #28]
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61bb      	str	r3, [r7, #24]
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]
 8000ddc:	2300      	movs	r3, #0
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	2300      	movs	r3, #0
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	2300      	movs	r3, #0
 8000de6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000de8:	4b5f      	ldr	r3, [pc, #380]	; (8000f68 <RCC_GetClocksFreq+0x1a0>)
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	f003 030c 	and.w	r3, r3, #12
 8000df0:	61fb      	str	r3, [r7, #28]
  
  switch (tmp)
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	2b0c      	cmp	r3, #12
 8000df6:	d865      	bhi.n	8000ec4 <RCC_GetClocksFreq+0xfc>
 8000df8:	a201      	add	r2, pc, #4	; (adr r2, 8000e00 <RCC_GetClocksFreq+0x38>)
 8000dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dfe:	bf00      	nop
 8000e00:	08000e35 	.word	0x08000e35
 8000e04:	08000ec5 	.word	0x08000ec5
 8000e08:	08000ec5 	.word	0x08000ec5
 8000e0c:	08000ec5 	.word	0x08000ec5
 8000e10:	08000e55 	.word	0x08000e55
 8000e14:	08000ec5 	.word	0x08000ec5
 8000e18:	08000ec5 	.word	0x08000ec5
 8000e1c:	08000ec5 	.word	0x08000ec5
 8000e20:	08000e5d 	.word	0x08000e5d
 8000e24:	08000ec5 	.word	0x08000ec5
 8000e28:	08000ec5 	.word	0x08000ec5
 8000e2c:	08000ec5 	.word	0x08000ec5
 8000e30:	08000e65 	.word	0x08000e65
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 8000e34:	4b4c      	ldr	r3, [pc, #304]	; (8000f68 <RCC_GetClocksFreq+0x1a0>)
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000e3c:	0b5b      	lsrs	r3, r3, #13
 8000e3e:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	3301      	adds	r3, #1
 8000e44:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	601a      	str	r2, [r3, #0]
      break;
 8000e52:	e047      	b.n	8000ee4 <RCC_GetClocksFreq+0x11c>
    case 0x04:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a45      	ldr	r2, [pc, #276]	; (8000f6c <RCC_GetClocksFreq+0x1a4>)
 8000e58:	601a      	str	r2, [r3, #0]
      break;
 8000e5a:	e043      	b.n	8000ee4 <RCC_GetClocksFreq+0x11c>
    case 0x08:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a44      	ldr	r2, [pc, #272]	; (8000f70 <RCC_GetClocksFreq+0x1a8>)
 8000e60:	601a      	str	r2, [r3, #0]
      break;
 8000e62:	e03f      	b.n	8000ee4 <RCC_GetClocksFreq+0x11c>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8000e64:	4b40      	ldr	r3, [pc, #256]	; (8000f68 <RCC_GetClocksFreq+0x1a0>)
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000e6c:	61bb      	str	r3, [r7, #24]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 8000e6e:	4b3e      	ldr	r3, [pc, #248]	; (8000f68 <RCC_GetClocksFreq+0x1a0>)
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000e76:	617b      	str	r3, [r7, #20]
      pllmul = PLLMulTable[(pllmul >> 18)];
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	0c9b      	lsrs	r3, r3, #18
 8000e7c:	4a3d      	ldr	r2, [pc, #244]	; (8000f74 <RCC_GetClocksFreq+0x1ac>)
 8000e7e:	5cd3      	ldrb	r3, [r2, r3]
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	61bb      	str	r3, [r7, #24]
      plldiv = (plldiv >> 22) + 1;
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	0d9b      	lsrs	r3, r3, #22
 8000e88:	3301      	adds	r3, #1
 8000e8a:	617b      	str	r3, [r7, #20]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000e8c:	4b36      	ldr	r3, [pc, #216]	; (8000f68 <RCC_GetClocksFreq+0x1a0>)
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e94:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d109      	bne.n	8000eb0 <RCC_GetClocksFreq+0xe8>
      {
        /* HSI oscillator clock selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	4a33      	ldr	r2, [pc, #204]	; (8000f6c <RCC_GetClocksFreq+0x1a4>)
 8000ea0:	fb02 f203 	mul.w	r2, r2, r3
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	fbb2 f2f3 	udiv	r2, r2, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	601a      	str	r2, [r3, #0]
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 8000eae:	e019      	b.n	8000ee4 <RCC_GetClocksFreq+0x11c>
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
      }
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	4a2f      	ldr	r2, [pc, #188]	; (8000f70 <RCC_GetClocksFreq+0x1a8>)
 8000eb4:	fb02 f203 	mul.w	r2, r2, r3
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	fbb2 f2f3 	udiv	r2, r2, r3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	601a      	str	r2, [r3, #0]
      }
      break;
 8000ec2:	e00f      	b.n	8000ee4 <RCC_GetClocksFreq+0x11c>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 8000ec4:	4b28      	ldr	r3, [pc, #160]	; (8000f68 <RCC_GetClocksFreq+0x1a0>)
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000ecc:	0b5b      	lsrs	r3, r3, #13
 8000ece:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	461a      	mov	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	601a      	str	r2, [r3, #0]
      break;
 8000ee2:	bf00      	nop
  }
  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000ee4:	4b20      	ldr	r3, [pc, #128]	; (8000f68 <RCC_GetClocksFreq+0x1a0>)
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000eec:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 4;
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	091b      	lsrs	r3, r3, #4
 8000ef2:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp]; 
 8000ef4:	4a20      	ldr	r2, [pc, #128]	; (8000f78 <RCC_GetClocksFreq+0x1b0>)
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	4413      	add	r3, r2
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	40da      	lsrs	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000f0c:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <RCC_GetClocksFreq+0x1a0>)
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000f14:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 8;
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	0a1b      	lsrs	r3, r3, #8
 8000f1a:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8000f1c:	4a16      	ldr	r2, [pc, #88]	; (8000f78 <RCC_GetClocksFreq+0x1b0>)
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	4413      	add	r3, r2
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	60fb      	str	r3, [r7, #12]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	685a      	ldr	r2, [r3, #4]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	40da      	lsrs	r2, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <RCC_GetClocksFreq+0x1a0>)
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000f3c:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 11;
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	0adb      	lsrs	r3, r3, #11
 8000f42:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8000f44:	4a0c      	ldr	r2, [pc, #48]	; (8000f78 <RCC_GetClocksFreq+0x1b0>)
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	4413      	add	r3, r2
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	685a      	ldr	r2, [r3, #4]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	40da      	lsrs	r2, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	60da      	str	r2, [r3, #12]
}
 8000f5c:	bf00      	nop
 8000f5e:	3724      	adds	r7, #36	; 0x24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc80      	pop	{r7}
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	00f42400 	.word	0x00f42400
 8000f70:	007a1200 	.word	0x007a1200
 8000f74:	20000000 	.word	0x20000000
 8000f78:	2000000c 	.word	0x2000000c

08000f7c <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	460b      	mov	r3, r1
 8000f86:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000f88:	78fb      	ldrb	r3, [r7, #3]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d006      	beq.n	8000f9c <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000f8e:	4909      	ldr	r1, [pc, #36]	; (8000fb4 <RCC_AHBPeriphClockCmd+0x38>)
 8000f90:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <RCC_AHBPeriphClockCmd+0x38>)
 8000f92:	69da      	ldr	r2, [r3, #28]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8000f9a:	e006      	b.n	8000faa <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000f9c:	4905      	ldr	r1, [pc, #20]	; (8000fb4 <RCC_AHBPeriphClockCmd+0x38>)
 8000f9e:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <RCC_AHBPeriphClockCmd+0x38>)
 8000fa0:	69da      	ldr	r2, [r3, #28]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	61cb      	str	r3, [r1, #28]
  }
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr
 8000fb4:	40023800 	.word	0x40023800

08000fb8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000fc4:	78fb      	ldrb	r3, [r7, #3]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d006      	beq.n	8000fd8 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000fca:	4909      	ldr	r1, [pc, #36]	; (8000ff0 <RCC_APB2PeriphClockCmd+0x38>)
 8000fcc:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <RCC_APB2PeriphClockCmd+0x38>)
 8000fce:	6a1a      	ldr	r2, [r3, #32]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000fd6:	e006      	b.n	8000fe6 <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000fd8:	4905      	ldr	r1, [pc, #20]	; (8000ff0 <RCC_APB2PeriphClockCmd+0x38>)
 8000fda:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <RCC_APB2PeriphClockCmd+0x38>)
 8000fdc:	6a1a      	ldr	r2, [r3, #32]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	620b      	str	r3, [r1, #32]
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr
 8000ff0:	40023800 	.word	0x40023800

08000ff4 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001000:	78fb      	ldrb	r3, [r7, #3]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d006      	beq.n	8001014 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001006:	4909      	ldr	r1, [pc, #36]	; (800102c <RCC_APB1PeriphClockCmd+0x38>)
 8001008:	4b08      	ldr	r3, [pc, #32]	; (800102c <RCC_APB1PeriphClockCmd+0x38>)
 800100a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4313      	orrs	r3, r2
 8001010:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001012:	e006      	b.n	8001022 <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001014:	4905      	ldr	r1, [pc, #20]	; (800102c <RCC_APB1PeriphClockCmd+0x38>)
 8001016:	4b05      	ldr	r3, [pc, #20]	; (800102c <RCC_APB1PeriphClockCmd+0x38>)
 8001018:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	43db      	mvns	r3, r3
 800101e:	4013      	ands	r3, r2
 8001020:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr
 800102c:	40023800 	.word	0x40023800

08001030 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8001030:	b480      	push	{r7}
 8001032:	b087      	sub	sp, #28
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8001042:	2300      	movs	r3, #0
 8001044:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	095b      	lsrs	r3, r3, #5
 800104a:	b2db      	uxtb	r3, r3
 800104c:	60fb      	str	r3, [r7, #12]

  if (tmp == 1)               /* The flag to check is in CR register */
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d103      	bne.n	800105c <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8001054:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <RCC_GetFlagStatus+0x60>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	617b      	str	r3, [r7, #20]
 800105a:	e002      	b.n	8001062 <RCC_GetFlagStatus+0x32>
  }
  else          /* The flag to check is in CSR register (tmp == 2) */
  {
    statusreg = RCC->CSR;
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <RCC_GetFlagStatus+0x60>)
 800105e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001060:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	f003 031f 	and.w	r3, r3, #31
 8001068:	60fb      	str	r3, [r7, #12]

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 800106a:	697a      	ldr	r2, [r7, #20]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	fa22 f303 	lsr.w	r3, r2, r3
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	2b00      	cmp	r3, #0
 8001078:	d002      	beq.n	8001080 <RCC_GetFlagStatus+0x50>
  {
    bitstatus = SET;
 800107a:	2301      	movs	r3, #1
 800107c:	74fb      	strb	r3, [r7, #19]
 800107e:	e001      	b.n	8001084 <RCC_GetFlagStatus+0x54>
  }
  else
  {
    bitstatus = RESET;
 8001080:	2300      	movs	r3, #0
 8001082:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 8001084:	7cfb      	ldrb	r3, [r7, #19]
}
 8001086:	4618      	mov	r0, r3
 8001088:	371c      	adds	r7, #28
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr
 8001090:	40023800 	.word	0x40023800

08001094 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that 
  *        contains the configuration information for the specified USART peripheral.
  * @retval None.
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08a      	sub	sp, #40	; 0x28
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800109e:	2300      	movs	r3, #0
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
 80010a2:	2300      	movs	r3, #0
 80010a4:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }
   
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	8a1b      	ldrh	r3, [r3, #16]
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80010b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	88db      	ldrh	r3, [r3, #6]
 80010c2:	461a      	mov	r2, r3
 80010c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c6:	4313      	orrs	r3, r2
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80010ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010cc:	b29a      	uxth	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	899b      	ldrh	r3, [r3, #12]
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80010da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010dc:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80010e0:	f023 030c 	bic.w	r3, r3, #12
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	889a      	ldrh	r2, [r3, #4]
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	891b      	ldrh	r3, [r3, #8]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80010f6:	4313      	orrs	r3, r2
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	461a      	mov	r2, r3
 80010fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fe:	4313      	orrs	r3, r2
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8001102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001104:	b29a      	uxth	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	8a9b      	ldrh	r3, [r3, #20]
 800110e:	b29b      	uxth	r3, r3
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8001112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001114:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001118:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	899b      	ldrh	r3, [r3, #12]
 800111e:	461a      	mov	r2, r3
 8001120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001122:	4313      	orrs	r3, r2
 8001124:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8001126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001128:	b29a      	uxth	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800112e:	f107 0308 	add.w	r3, r7, #8
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff fe48 	bl	8000dc8 <RCC_GetClocksFreq>
  if (USARTx == USART1) 
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a2e      	ldr	r2, [pc, #184]	; (80011f4 <USART_Init+0x160>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d102      	bne.n	8001146 <USART_Init+0xb2>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	623b      	str	r3, [r7, #32]
 8001144:	e001      	b.n	800114a <USART_Init+0xb6>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	623b      	str	r3, [r7, #32]
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	899b      	ldrh	r3, [r3, #12]
 800114e:	b29b      	uxth	r3, r3
 8001150:	b21b      	sxth	r3, r3
 8001152:	2b00      	cmp	r3, #0
 8001154:	da0c      	bge.n	8001170 <USART_Init+0xdc>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8001156:	6a3a      	ldr	r2, [r7, #32]
 8001158:	4613      	mov	r3, r2
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	4413      	add	r3, r2
 800115e:	009a      	lsls	r2, r3, #2
 8001160:	441a      	add	r2, r3
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	fbb2 f3f3 	udiv	r3, r2, r3
 800116c:	61fb      	str	r3, [r7, #28]
 800116e:	e00b      	b.n	8001188 <USART_Init+0xf4>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8001170:	6a3a      	ldr	r2, [r7, #32]
 8001172:	4613      	mov	r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	4413      	add	r3, r2
 8001178:	009a      	lsls	r2, r3, #2
 800117a:	441a      	add	r2, r3
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	fbb2 f3f3 	udiv	r3, r2, r3
 8001186:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	4a1b      	ldr	r2, [pc, #108]	; (80011f8 <USART_Init+0x164>)
 800118c:	fba2 2303 	umull	r2, r3, r2, r3
 8001190:	095b      	lsrs	r3, r3, #5
 8001192:	011b      	lsls	r3, r3, #4
 8001194:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8001196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001198:	091b      	lsrs	r3, r3, #4
 800119a:	2264      	movs	r2, #100	; 0x64
 800119c:	fb02 f303 	mul.w	r3, r2, r3
 80011a0:	69fa      	ldr	r2, [r7, #28]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	899b      	ldrh	r3, [r3, #12]
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	b21b      	sxth	r3, r3
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	da0c      	bge.n	80011cc <USART_Init+0x138>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	00db      	lsls	r3, r3, #3
 80011b6:	3332      	adds	r3, #50	; 0x32
 80011b8:	4a0f      	ldr	r2, [pc, #60]	; (80011f8 <USART_Init+0x164>)
 80011ba:	fba2 2303 	umull	r2, r3, r2, r3
 80011be:	095b      	lsrs	r3, r3, #5
 80011c0:	f003 0307 	and.w	r3, r3, #7
 80011c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011c6:	4313      	orrs	r3, r2
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
 80011ca:	e00b      	b.n	80011e4 <USART_Init+0x150>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	011b      	lsls	r3, r3, #4
 80011d0:	3332      	adds	r3, #50	; 0x32
 80011d2:	4a09      	ldr	r2, [pc, #36]	; (80011f8 <USART_Init+0x164>)
 80011d4:	fba2 2303 	umull	r2, r3, r2, r3
 80011d8:	095b      	lsrs	r3, r3, #5
 80011da:	f003 030f 	and.w	r3, r3, #15
 80011de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011e0:	4313      	orrs	r3, r2
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
  }
 
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 80011e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	811a      	strh	r2, [r3, #8]
}
 80011ec:	bf00      	nop
 80011ee:	3728      	adds	r7, #40	; 0x28
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40013800 	.word	0x40013800
 80011f8:	51eb851f 	.word	0x51eb851f

080011fc <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001208:	78fb      	ldrb	r3, [r7, #3]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d008      	beq.n	8001220 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	899b      	ldrh	r3, [r3, #12]
 8001212:	b29b      	uxth	r3, r3
 8001214:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001218:	b29a      	uxth	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 800121e:	e007      	b.n	8001230 <USART_Cmd+0x34>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	899b      	ldrh	r3, [r3, #12]
 8001224:	b29b      	uxth	r3, r3
 8001226:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800122a:	b29a      	uxth	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	819a      	strh	r2, [r3, #12]
  }
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop

0800123c <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None.
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8001248:	887b      	ldrh	r3, [r7, #2]
 800124a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800124e:	b29a      	uxth	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	809a      	strh	r2, [r3, #4]
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop

08001260 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	889b      	ldrh	r3, [r3, #4]
 800126c:	b29b      	uxth	r3, r3
 800126e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001272:	b29b      	uxth	r3, r3
}
 8001274:	4618      	mov	r0, r3
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop

08001280 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8001280:	b480      	push	{r7}
 8001282:	b087      	sub	sp, #28
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	807b      	strh	r3, [r7, #2]
 800128c:	4613      	mov	r3, r2
 800128e:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8001290:	2300      	movs	r3, #0
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	2300      	movs	r3, #0
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	2300      	movs	r3, #0
 800129a:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80012a4:	887b      	ldrh	r3, [r7, #2]
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	095b      	lsrs	r3, r3, #5
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80012ae:	887b      	ldrh	r3, [r7, #2]
 80012b0:	f003 031f 	and.w	r3, r3, #31
 80012b4:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 80012b6:	2201      	movs	r2, #1
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d103      	bne.n	80012ce <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	330c      	adds	r3, #12
 80012ca:	617b      	str	r3, [r7, #20]
 80012cc:	e009      	b.n	80012e2 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d103      	bne.n	80012dc <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	3310      	adds	r3, #16
 80012d8:	617b      	str	r3, [r7, #20]
 80012da:	e002      	b.n	80012e2 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	3314      	adds	r3, #20
 80012e0:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 80012e2:	787b      	ldrb	r3, [r7, #1]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d006      	beq.n	80012f6 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	697a      	ldr	r2, [r7, #20]
 80012ec:	6811      	ldr	r1, [r2, #0]
 80012ee:	68ba      	ldr	r2, [r7, #8]
 80012f0:	430a      	orrs	r2, r1
 80012f2:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 80012f4:	e006      	b.n	8001304 <USART_ITConfig+0x84>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	697a      	ldr	r2, [r7, #20]
 80012fa:	6811      	ldr	r1, [r2, #0]
 80012fc:	68ba      	ldr	r2, [r7, #8]
 80012fe:	43d2      	mvns	r2, r2
 8001300:	400a      	ands	r2, r1
 8001302:	601a      	str	r2, [r3, #0]
  }
}
 8001304:	bf00      	nop
 8001306:	371c      	adds	r7, #28
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop

08001310 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001310:	b480      	push	{r7}
 8001312:	b087      	sub	sp, #28
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 800131c:	2300      	movs	r3, #0
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	2300      	movs	r3, #0
 8001326:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8001328:	2300      	movs	r3, #0
 800132a:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800132c:	887b      	ldrh	r3, [r7, #2]
 800132e:	b2db      	uxtb	r3, r3
 8001330:	095b      	lsrs	r3, r3, #5
 8001332:	b2db      	uxtb	r3, r3
 8001334:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8001336:	887b      	ldrh	r3, [r7, #2]
 8001338:	f003 031f 	and.w	r3, r3, #31
 800133c:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 800133e:	2201      	movs	r2, #1
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d107      	bne.n	800135e <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	899b      	ldrh	r3, [r3, #12]
 8001352:	b29b      	uxth	r3, r3
 8001354:	461a      	mov	r2, r3
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	4013      	ands	r3, r2
 800135a:	617b      	str	r3, [r7, #20]
 800135c:	e011      	b.n	8001382 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	2b02      	cmp	r3, #2
 8001362:	d107      	bne.n	8001374 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	8a1b      	ldrh	r3, [r3, #16]
 8001368:	b29b      	uxth	r3, r3
 800136a:	461a      	mov	r2, r3
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	4013      	ands	r3, r2
 8001370:	617b      	str	r3, [r7, #20]
 8001372:	e006      	b.n	8001382 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	8a9b      	ldrh	r3, [r3, #20]
 8001378:	b29b      	uxth	r3, r3
 800137a:	461a      	mov	r2, r3
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	4013      	ands	r3, r2
 8001380:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8001382:	887b      	ldrh	r3, [r7, #2]
 8001384:	0a1b      	lsrs	r3, r3, #8
 8001386:	b29b      	uxth	r3, r3
 8001388:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 800138a:	2201      	movs	r2, #1
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	881b      	ldrh	r3, [r3, #0]
 8001398:	b29b      	uxth	r3, r3
 800139a:	461a      	mov	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4013      	ands	r3, r2
 80013a0:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d005      	beq.n	80013b4 <USART_GetITStatus+0xa4>
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d002      	beq.n	80013b4 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 80013ae:	2301      	movs	r3, #1
 80013b0:	74fb      	strb	r3, [r7, #19]
 80013b2:	e001      	b.n	80013b8 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 80013b4:	2300      	movs	r3, #0
 80013b6:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 80013b8:	7cfb      	ldrb	r3, [r7, #19]
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	371c      	adds	r7, #28
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr

080013c4 <USART_ClearITPendingBit>:
  * @note TXE pending bit is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	460b      	mov	r3, r1
 80013ce:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 80013d0:	2300      	movs	r3, #0
 80013d2:	81fb      	strh	r3, [r7, #14]
 80013d4:	2300      	movs	r3, #0
 80013d6:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 80013d8:	887b      	ldrh	r3, [r7, #2]
 80013da:	0a1b      	lsrs	r3, r3, #8
 80013dc:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 80013de:	89fb      	ldrh	r3, [r7, #14]
 80013e0:	2201      	movs	r2, #1
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 80013e8:	89bb      	ldrh	r3, [r7, #12]
 80013ea:	43db      	mvns	r3, r3
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	801a      	strh	r2, [r3, #0]
}
 80013f2:	bf00      	nop
 80013f4:	3714      	adds	r7, #20
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr

080013fc <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
  int c;
  adc_constant = 3.3/4096;
 8001402:	4b14      	ldr	r3, [pc, #80]	; (8001454 <main+0x58>)
 8001404:	4a14      	ldr	r2, [pc, #80]	; (8001458 <main+0x5c>)
 8001406:	601a      	str	r2, [r3, #0]
  mode = 0;
 8001408:	4b14      	ldr	r3, [pc, #80]	; (800145c <main+0x60>)
 800140a:	2200      	movs	r2, #0
 800140c:	701a      	strb	r2, [r3, #0]

  i = 0;
 800140e:	4b14      	ldr	r3, [pc, #80]	; (8001460 <main+0x64>)
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
  buffer_ready = 1;
 8001414:	4b13      	ldr	r3, [pc, #76]	; (8001464 <main+0x68>)
 8001416:	2201      	movs	r2, #1
 8001418:	701a      	strb	r2, [r3, #0]
  adc_init();
 800141a:	f000 fa3b 	bl	8001894 <adc_init>
  led_init();
 800141e:	f000 faa5 	bl	800196c <led_init>
  usart_init();
 8001422:	f000 fabf 	bl	80019a4 <usart_init>
  USART_ClearITPendingBit(USART2, USART_IT_TC);
 8001426:	f240 6126 	movw	r1, #1574	; 0x626
 800142a:	480f      	ldr	r0, [pc, #60]	; (8001468 <main+0x6c>)
 800142c:	f7ff ffca 	bl	80013c4 <USART_ClearITPendingBit>
  /* TODO - Add your application code here */

  /* Infinite loop */
  while (1)
  {
	  uloha2_function();
 8001430:	f000 fb34 	bl	8001a9c <uloha2_function>
	  //USART_send_data(text);
	  USART_send_data_NVIC(text);
 8001434:	480d      	ldr	r0, [pc, #52]	; (800146c <main+0x70>)
 8001436:	f000 fb17 	bl	8001a68 <USART_send_data_NVIC>
	  for(c = 0; c < 10000;c++);
 800143a:	2300      	movs	r3, #0
 800143c:	607b      	str	r3, [r7, #4]
 800143e:	e002      	b.n	8001446 <main+0x4a>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3301      	adds	r3, #1
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f242 720f 	movw	r2, #9999	; 0x270f
 800144c:	4293      	cmp	r3, r2
 800144e:	ddf7      	ble.n	8001440 <main+0x44>
  }
 8001450:	e7ee      	b.n	8001430 <main+0x34>
 8001452:	bf00      	nop
 8001454:	20000038 	.word	0x20000038
 8001458:	3a533333 	.word	0x3a533333
 800145c:	2000004a 	.word	0x2000004a
 8001460:	2000004c 	.word	0x2000004c
 8001464:	20000050 	.word	0x20000050
 8001468:	40004400 	.word	0x40004400
 800146c:	20000040 	.word	0x20000040

08001470 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001470:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014a8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001474:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001476:	e003      	b.n	8001480 <LoopCopyDataInit>

08001478 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001478:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <LoopFillZerobss+0x18>)
  ldr r3, [r3, r1]
 800147a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800147c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800147e:	3104      	adds	r1, #4

08001480 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001480:	480b      	ldr	r0, [pc, #44]	; (80014b0 <LoopFillZerobss+0x1c>)
  ldr r3, =_edata
 8001482:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <LoopFillZerobss+0x20>)
  adds r2, r0, r1
 8001484:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001486:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001488:	d3f6      	bcc.n	8001478 <CopyDataInit>
  ldr r2, =_sbss
 800148a:	4a0b      	ldr	r2, [pc, #44]	; (80014b8 <LoopFillZerobss+0x24>)
  b LoopFillZerobss
 800148c:	e002      	b.n	8001494 <LoopFillZerobss>

0800148e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800148e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001490:	f842 3b04 	str.w	r3, [r2], #4

08001494 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001494:	4b09      	ldr	r3, [pc, #36]	; (80014bc <LoopFillZerobss+0x28>)
  cmp r2, r3
 8001496:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001498:	d3f9      	bcc.n	800148e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800149a:	f000 f841 	bl	8001520 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800149e:	f000 fbc7 	bl	8001c30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014a2:	f7ff ffab 	bl	80013fc <main>
  bx lr
 80014a6:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014a8:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 80014ac:	08001ca8 	.word	0x08001ca8
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 80014b0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80014b4:	2000001c 	.word	0x2000001c
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 80014b8:	2000001c 	.word	0x2000001c
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 80014bc:	20000054 	.word	0x20000054

080014c0 <AES_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014c0:	e7fe      	b.n	80014c0 <AES_IRQHandler>
	...

080014c4 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr

080014d0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 80014d4:	e7fe      	b.n	80014d4 <HardFault_Handler+0x4>
 80014d6:	bf00      	nop

080014d8 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 80014dc:	e7fe      	b.n	80014dc <MemManage_Handler+0x4>
 80014de:	bf00      	nop

080014e0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 80014e4:	e7fe      	b.n	80014e4 <BusFault_Handler+0x4>
 80014e6:	bf00      	nop

080014e8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 80014ec:	e7fe      	b.n	80014ec <UsageFault_Handler+0x4>
 80014ee:	bf00      	nop

080014f0 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr

080014fc <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr

08001508 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr

08001514 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
	/*  TimingDelay_Decrement(); */
#ifdef USE_STM32L_DISCOVERY
  TimingDelay_Decrement();
#endif
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr

08001520 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8001524:	4a15      	ldr	r2, [pc, #84]	; (800157c <SystemInit+0x5c>)
 8001526:	4b15      	ldr	r3, [pc, #84]	; (800157c <SystemInit+0x5c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800152e:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8001530:	4912      	ldr	r1, [pc, #72]	; (800157c <SystemInit+0x5c>)
 8001532:	4b12      	ldr	r3, [pc, #72]	; (800157c <SystemInit+0x5c>)
 8001534:	689a      	ldr	r2, [r3, #8]
 8001536:	4b12      	ldr	r3, [pc, #72]	; (8001580 <SystemInit+0x60>)
 8001538:	4013      	ands	r3, r2
 800153a:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 800153c:	4a0f      	ldr	r2, [pc, #60]	; (800157c <SystemInit+0x5c>)
 800153e:	4b0f      	ldr	r3, [pc, #60]	; (800157c <SystemInit+0x5c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8001546:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 800154a:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800154c:	4a0b      	ldr	r2, [pc, #44]	; (800157c <SystemInit+0x5c>)
 800154e:	4b0b      	ldr	r3, [pc, #44]	; (800157c <SystemInit+0x5c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001556:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8001558:	4a08      	ldr	r2, [pc, #32]	; (800157c <SystemInit+0x5c>)
 800155a:	4b08      	ldr	r3, [pc, #32]	; (800157c <SystemInit+0x5c>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8001562:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001564:	4b05      	ldr	r3, [pc, #20]	; (800157c <SystemInit+0x5c>)
 8001566:	2200      	movs	r2, #0
 8001568:	60da      	str	r2, [r3, #12]
#ifdef DATA_IN_ExtSRAM
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
    
  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 800156a:	f000 f80d 	bl	8001588 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800156e:	4b05      	ldr	r3, [pc, #20]	; (8001584 <SystemInit+0x64>)
 8001570:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001574:	609a      	str	r2, [r3, #8]
#endif
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40023800 	.word	0x40023800
 8001580:	88ffc00c 	.word	0x88ffc00c
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800158e:	2300      	movs	r3, #0
 8001590:	607b      	str	r3, [r7, #4]
 8001592:	2300      	movs	r3, #0
 8001594:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001596:	4a41      	ldr	r2, [pc, #260]	; (800169c <SetSysClock+0x114>)
 8001598:	4b40      	ldr	r3, [pc, #256]	; (800169c <SetSysClock+0x114>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80015a2:	4b3e      	ldr	r3, [pc, #248]	; (800169c <SetSysClock+0x114>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015aa:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3301      	adds	r3, #1
 80015b0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d103      	bne.n	80015c0 <SetSysClock+0x38>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80015be:	d1f0      	bne.n	80015a2 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80015c0:	4b36      	ldr	r3, [pc, #216]	; (800169c <SetSysClock+0x114>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d002      	beq.n	80015d2 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80015cc:	2301      	movs	r3, #1
 80015ce:	603b      	str	r3, [r7, #0]
 80015d0:	e001      	b.n	80015d6 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80015d2:	2300      	movs	r3, #0
 80015d4:	603b      	str	r3, [r7, #0]
  }
  
  if (HSEStatus == (uint32_t)0x01)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d15a      	bne.n	8001692 <SetSysClock+0x10a>
  {
    /* Enable 64-bit access */
    FLASH->ACR |= FLASH_ACR_ACC64;
 80015dc:	4a30      	ldr	r2, [pc, #192]	; (80016a0 <SetSysClock+0x118>)
 80015de:	4b30      	ldr	r3, [pc, #192]	; (80016a0 <SetSysClock+0x118>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f043 0304 	orr.w	r3, r3, #4
 80015e6:	6013      	str	r3, [r2, #0]
    
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 80015e8:	4a2d      	ldr	r2, [pc, #180]	; (80016a0 <SetSysClock+0x118>)
 80015ea:	4b2d      	ldr	r3, [pc, #180]	; (80016a0 <SetSysClock+0x118>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f043 0302 	orr.w	r3, r3, #2
 80015f2:	6013      	str	r3, [r2, #0]

    /* Flash 1 wait state */
    FLASH->ACR |= FLASH_ACR_LATENCY;
 80015f4:	4a2a      	ldr	r2, [pc, #168]	; (80016a0 <SetSysClock+0x118>)
 80015f6:	4b2a      	ldr	r3, [pc, #168]	; (80016a0 <SetSysClock+0x118>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f043 0301 	orr.w	r3, r3, #1
 80015fe:	6013      	str	r3, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001600:	4a26      	ldr	r2, [pc, #152]	; (800169c <SetSysClock+0x114>)
 8001602:	4b26      	ldr	r3, [pc, #152]	; (800169c <SetSysClock+0x114>)
 8001604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800160a:	6253      	str	r3, [r2, #36]	; 0x24
  
    /* Select the Voltage Range 1 (1.8 V) */
    PWR->CR = PWR_CR_VOS_0;
 800160c:	4b25      	ldr	r3, [pc, #148]	; (80016a4 <SetSysClock+0x11c>)
 800160e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001612:	601a      	str	r2, [r3, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 8001614:	bf00      	nop
 8001616:	4b23      	ldr	r3, [pc, #140]	; (80016a4 <SetSysClock+0x11c>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f003 0310 	and.w	r3, r3, #16
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1f9      	bne.n	8001616 <SetSysClock+0x8e>
    {
    }
        
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001622:	4a1e      	ldr	r2, [pc, #120]	; (800169c <SetSysClock+0x114>)
 8001624:	4b1d      	ldr	r3, [pc, #116]	; (800169c <SetSysClock+0x114>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	6093      	str	r3, [r2, #8]
  
    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800162a:	4a1c      	ldr	r2, [pc, #112]	; (800169c <SetSysClock+0x114>)
 800162c:	4b1b      	ldr	r3, [pc, #108]	; (800169c <SetSysClock+0x114>)
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8001632:	4a1a      	ldr	r2, [pc, #104]	; (800169c <SetSysClock+0x114>)
 8001634:	4b19      	ldr	r3, [pc, #100]	; (800169c <SetSysClock+0x114>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	6093      	str	r3, [r2, #8]
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 800163a:	4a18      	ldr	r2, [pc, #96]	; (800169c <SetSysClock+0x114>)
 800163c:	4b17      	ldr	r3, [pc, #92]	; (800169c <SetSysClock+0x114>)
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8001644:	6093      	str	r3, [r2, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 8001646:	4a15      	ldr	r2, [pc, #84]	; (800169c <SetSysClock+0x114>)
 8001648:	4b14      	ldr	r3, [pc, #80]	; (800169c <SetSysClock+0x114>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f443 0311 	orr.w	r3, r3, #9502720	; 0x910000
 8001650:	6093      	str	r3, [r2, #8]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001652:	4a12      	ldr	r2, [pc, #72]	; (800169c <SetSysClock+0x114>)
 8001654:	4b11      	ldr	r3, [pc, #68]	; (800169c <SetSysClock+0x114>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800165c:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800165e:	bf00      	nop
 8001660:	4b0e      	ldr	r3, [pc, #56]	; (800169c <SetSysClock+0x114>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d0f9      	beq.n	8001660 <SetSysClock+0xd8>
    {
    }
        
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800166c:	4a0b      	ldr	r2, [pc, #44]	; (800169c <SetSysClock+0x114>)
 800166e:	4b0b      	ldr	r3, [pc, #44]	; (800169c <SetSysClock+0x114>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f023 0303 	bic.w	r3, r3, #3
 8001676:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8001678:	4a08      	ldr	r2, [pc, #32]	; (800169c <SetSysClock+0x114>)
 800167a:	4b08      	ldr	r3, [pc, #32]	; (800169c <SetSysClock+0x114>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f043 0303 	orr.w	r3, r3, #3
 8001682:	6093      	str	r3, [r2, #8]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8001684:	bf00      	nop
 8001686:	4b05      	ldr	r3, [pc, #20]	; (800169c <SetSysClock+0x114>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f003 030c 	and.w	r3, r3, #12
 800168e:	2b0c      	cmp	r3, #12
 8001690:	d1f9      	bne.n	8001686 <SetSysClock+0xfe>
  else
  {
    /* If HSE fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr
 800169c:	40023800 	.word	0x40023800
 80016a0:	40023c00 	.word	0x40023c00
 80016a4:	40007000 	.word	0x40007000

080016a8 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b087      	sub	sp, #28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
	int div = 1;
 80016b4:	2301      	movs	r3, #1
 80016b6:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 80016b8:	e004      	b.n	80016c4 <ts_itoa+0x1c>
		div *= base;
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	fb02 f303 	mul.w	r3, r2, r3
 80016c2:	617b      	str	r3, [r7, #20]
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
	int div = 1;
	while (d/div >= base)
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d2f3      	bcs.n	80016ba <ts_itoa+0x12>
		div *= base;

	while (div != 0)
 80016d2:	e029      	b.n	8001728 <ts_itoa+0x80>
	{
		int num = d/div;
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	68ba      	ldr	r2, [r7, #8]
 80016d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016dc:	613b      	str	r3, [r7, #16]
		d = d%div;
 80016de:	697a      	ldr	r2, [r7, #20]
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80016e6:	fb02 f201 	mul.w	r2, r2, r1
 80016ea:	1a9b      	subs	r3, r3, r2
 80016ec:	60bb      	str	r3, [r7, #8]
		div /= base;
 80016ee:	697a      	ldr	r2, [r7, #20]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80016f6:	617b      	str	r3, [r7, #20]
		if (num > 9)
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	2b09      	cmp	r3, #9
 80016fc:	dd0a      	ble.n	8001714 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	1c59      	adds	r1, r3, #1
 8001704:	68fa      	ldr	r2, [r7, #12]
 8001706:	6011      	str	r1, [r2, #0]
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	b2d2      	uxtb	r2, r2
 800170c:	3237      	adds	r2, #55	; 0x37
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	701a      	strb	r2, [r3, #0]
 8001712:	e009      	b.n	8001728 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	1c59      	adds	r1, r3, #1
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	6011      	str	r1, [r2, #0]
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	b2d2      	uxtb	r2, r2
 8001722:	3230      	adds	r2, #48	; 0x30
 8001724:	b2d2      	uxtb	r2, r2
 8001726:	701a      	strb	r2, [r3, #0]
{
	int div = 1;
	while (d/div >= base)
		div *= base;

	while (div != 0)
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1d2      	bne.n	80016d4 <ts_itoa+0x2c>
		if (num > 9)
			*((*buf)++) = (num-10) + 'A';
		else
			*((*buf)++) = num + '0';
	}
}
 800172e:	bf00      	nop
 8001730:	371c      	adds	r7, #28
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr

08001738 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8001748:	e07d      	b.n	8001846 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b25      	cmp	r3, #37	; 0x25
 8001750:	d171      	bne.n	8001836 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	3301      	adds	r3, #1
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b64      	cmp	r3, #100	; 0x64
 800175e:	d01e      	beq.n	800179e <ts_formatstring+0x66>
 8001760:	2b64      	cmp	r3, #100	; 0x64
 8001762:	dc06      	bgt.n	8001772 <ts_formatstring+0x3a>
 8001764:	2b58      	cmp	r3, #88	; 0x58
 8001766:	d050      	beq.n	800180a <ts_formatstring+0xd2>
 8001768:	2b63      	cmp	r3, #99	; 0x63
 800176a:	d00e      	beq.n	800178a <ts_formatstring+0x52>
 800176c:	2b25      	cmp	r3, #37	; 0x25
 800176e:	d058      	beq.n	8001822 <ts_formatstring+0xea>
 8001770:	e05d      	b.n	800182e <ts_formatstring+0xf6>
 8001772:	2b73      	cmp	r3, #115	; 0x73
 8001774:	d02b      	beq.n	80017ce <ts_formatstring+0x96>
 8001776:	2b73      	cmp	r3, #115	; 0x73
 8001778:	dc02      	bgt.n	8001780 <ts_formatstring+0x48>
 800177a:	2b69      	cmp	r3, #105	; 0x69
 800177c:	d00f      	beq.n	800179e <ts_formatstring+0x66>
 800177e:	e056      	b.n	800182e <ts_formatstring+0xf6>
 8001780:	2b75      	cmp	r3, #117	; 0x75
 8001782:	d037      	beq.n	80017f4 <ts_formatstring+0xbc>
 8001784:	2b78      	cmp	r3, #120	; 0x78
 8001786:	d040      	beq.n	800180a <ts_formatstring+0xd2>
 8001788:	e051      	b.n	800182e <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	1c5a      	adds	r2, r3, #1
 800178e:	60fa      	str	r2, [r7, #12]
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	1d11      	adds	r1, r2, #4
 8001794:	6079      	str	r1, [r7, #4]
 8001796:	6812      	ldr	r2, [r2, #0]
 8001798:	b2d2      	uxtb	r2, r2
 800179a:	701a      	strb	r2, [r3, #0]
				break;
 800179c:	e047      	b.n	800182e <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	1d1a      	adds	r2, r3, #4
 80017a2:	607a      	str	r2, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	da07      	bge.n	80017be <ts_formatstring+0x86>
					{
						val *= -1;
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	425b      	negs	r3, r3
 80017b2:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	1c5a      	adds	r2, r3, #1
 80017b8:	60fa      	str	r2, [r7, #12]
 80017ba:	222d      	movs	r2, #45	; 0x2d
 80017bc:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 80017be:	69f9      	ldr	r1, [r7, #28]
 80017c0:	f107 030c 	add.w	r3, r7, #12
 80017c4:	220a      	movs	r2, #10
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff ff6e 	bl	80016a8 <ts_itoa>
				}
				break;
 80017cc:	e02f      	b.n	800182e <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	1d1a      	adds	r2, r3, #4
 80017d2:	607a      	str	r2, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	61bb      	str	r3, [r7, #24]
					while (*arg)
 80017d8:	e007      	b.n	80017ea <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	1c5a      	adds	r2, r3, #1
 80017de:	60fa      	str	r2, [r7, #12]
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	1c51      	adds	r1, r2, #1
 80017e4:	61b9      	str	r1, [r7, #24]
 80017e6:	7812      	ldrb	r2, [r2, #0]
 80017e8:	701a      	strb	r2, [r3, #0]
				}
				break;
			  case 's':
				{
					char * arg = va_arg(va, char *);
					while (*arg)
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1f3      	bne.n	80017da <ts_formatstring+0xa2>
					{
						*buf++ = *arg++;
					}
				}
				break;
 80017f2:	e01c      	b.n	800182e <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	1d1a      	adds	r2, r3, #4
 80017f8:	607a      	str	r2, [r7, #4]
 80017fa:	6819      	ldr	r1, [r3, #0]
 80017fc:	f107 030c 	add.w	r3, r7, #12
 8001800:	220a      	movs	r2, #10
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff ff50 	bl	80016a8 <ts_itoa>
				break;
 8001808:	e011      	b.n	800182e <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	1d1a      	adds	r2, r3, #4
 800180e:	607a      	str	r2, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4619      	mov	r1, r3
 8001814:	f107 030c 	add.w	r3, r7, #12
 8001818:	2210      	movs	r2, #16
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff ff44 	bl	80016a8 <ts_itoa>
				break;
 8001820:	e005      	b.n	800182e <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	1c5a      	adds	r2, r3, #1
 8001826:	60fa      	str	r2, [r7, #12]
 8001828:	2225      	movs	r2, #37	; 0x25
 800182a:	701a      	strb	r2, [r3, #0]
				  break;
 800182c:	bf00      	nop
			}
			fmt++;
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	3301      	adds	r3, #1
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	e007      	b.n	8001846 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	1c5a      	adds	r2, r3, #1
 800183a:	60fa      	str	r2, [r7, #12]
 800183c:	68ba      	ldr	r2, [r7, #8]
 800183e:	1c51      	adds	r1, r2, #1
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	7812      	ldrb	r2, [r2, #0]
 8001844:	701a      	strb	r2, [r3, #0]
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
	char *start_buf = buf;
	while(*fmt)
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	f47f af7d 	bne.w	800174a <ts_formatstring+0x12>
		else
		{
			*buf++ = *fmt++;
		}
	}
	*buf = 0;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2200      	movs	r2, #0
 8001854:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	461a      	mov	r2, r3
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	1ad3      	subs	r3, r2, r3
}
 800185e:	4618      	mov	r0, r3
 8001860:	3720      	adds	r7, #32
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop

08001868 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 8001868:	b40e      	push	{r1, r2, r3}
 800186a:	b580      	push	{r7, lr}
 800186c:	b085      	sub	sp, #20
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 8001872:	f107 0320 	add.w	r3, r7, #32
 8001876:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 8001878:	68ba      	ldr	r2, [r7, #8]
 800187a:	69f9      	ldr	r1, [r7, #28]
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f7ff ff5b 	bl	8001738 <ts_formatstring>
 8001882:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 8001884:	68fb      	ldr	r3, [r7, #12]
}
 8001886:	4618      	mov	r0, r3
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001890:	b003      	add	sp, #12
 8001892:	4770      	bx	lr

08001894 <adc_init>:
 *      Author: Asus
 */
#include <vrs_cv5.h>

void adc_init()
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08a      	sub	sp, #40	; 0x28
 8001898:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	ADC_InitTypeDef ADC_InitStructure;
	/* Enable GPIO clock */
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 800189a:	2101      	movs	r1, #1
 800189c:	2001      	movs	r0, #1
 800189e:	f7ff fb6d 	bl	8000f7c <RCC_AHBPeriphClockCmd>
	/* Configure ADCx Channel 2 as analog input */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 ;
 80018a2:	2301      	movs	r3, #1
 80018a4:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 80018a6:	2303      	movs	r3, #3
 80018a8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 80018ac:	2300      	movs	r3, #0
 80018ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80018b2:	f107 0320 	add.w	r3, r7, #32
 80018b6:	4619      	mov	r1, r3
 80018b8:	482a      	ldr	r0, [pc, #168]	; (8001964 <adc_init+0xd0>)
 80018ba:	f7ff f997 	bl	8000bec <GPIO_Init>
	/* Enable the HSI oscillator */
	RCC_HSICmd(ENABLE);
 80018be:	2001      	movs	r0, #1
 80018c0:	f7ff fa72 	bl	8000da8 <RCC_HSICmd>
	/* Check that HSI oscillator is ready */
	while(RCC_GetFlagStatus(RCC_FLAG_HSIRDY) == RESET);
 80018c4:	bf00      	nop
 80018c6:	2021      	movs	r0, #33	; 0x21
 80018c8:	f7ff fbb2 	bl	8001030 <RCC_GetFlagStatus>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d0f9      	beq.n	80018c6 <adc_init+0x32>
	/* Enable ADC clock */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 80018d2:	2101      	movs	r1, #1
 80018d4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80018d8:	f7ff fb6e 	bl	8000fb8 <RCC_APB2PeriphClockCmd>
	/* Initialize ADC structure */
	ADC_StructInit(&ADC_InitStructure);
 80018dc:	f107 0308 	add.w	r3, r7, #8
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7fe ff8f 	bl	8000804 <ADC_StructInit>
	/* ADC1 configuration */
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 80018e6:	2300      	movs	r3, #0
 80018e8:	60bb      	str	r3, [r7, #8]
	ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
 80018ea:	2301      	movs	r3, #1
 80018ec:	737b      	strb	r3, [r7, #13]
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 80018ee:	2300      	movs	r3, #0
 80018f0:	613b      	str	r3, [r7, #16]
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61bb      	str	r3, [r7, #24]
	ADC_InitStructure.ADC_NbrOfConversion = 1;
 80018f6:	2301      	movs	r3, #1
 80018f8:	773b      	strb	r3, [r7, #28]
	ADC_Init(ADC1, &ADC_InitStructure);
 80018fa:	f107 0308 	add.w	r3, r7, #8
 80018fe:	4619      	mov	r1, r3
 8001900:	4819      	ldr	r0, [pc, #100]	; (8001968 <adc_init+0xd4>)
 8001902:	f7fe ff2b 	bl	800075c <ADC_Init>
	/* ADCx regular channel8 configuration */
	ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1, ADC_SampleTime_384Cycles);
 8001906:	2307      	movs	r3, #7
 8001908:	2201      	movs	r2, #1
 800190a:	2100      	movs	r1, #0
 800190c:	4816      	ldr	r0, [pc, #88]	; (8001968 <adc_init+0xd4>)
 800190e:	f7fe ffb5 	bl	800087c <ADC_RegularChannelConfig>

	ADC_ITConfig(ADC1, ADC_IT_EOC,ENABLE);
 8001912:	2201      	movs	r2, #1
 8001914:	f240 2105 	movw	r1, #517	; 0x205
 8001918:	4813      	ldr	r0, [pc, #76]	; (8001968 <adc_init+0xd4>)
 800191a:	f7ff f925 	bl	8000b68 <ADC_ITConfig>

	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 800191e:	f44f 7040 	mov.w	r0, #768	; 0x300
 8001922:	f7fe fea9 	bl	8000678 <NVIC_PriorityGroupConfig>
	NVIC_InitTypeDef NVIC_InitStructure;
	NVIC_InitStructure.NVIC_IRQChannel = ADC1_IRQn; //zoznam prerušení nájdete v súbore stm32l1xx.h
 8001926:	2312      	movs	r3, #18
 8001928:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 800192a:	2300      	movs	r3, #0
 800192c:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 800192e:	2300      	movs	r3, #0
 8001930:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001932:	2301      	movs	r3, #1
 8001934:	71fb      	strb	r3, [r7, #7]

	NVIC_Init(&NVIC_InitStructure);
 8001936:	1d3b      	adds	r3, r7, #4
 8001938:	4618      	mov	r0, r3
 800193a:	f7fe feaf 	bl	800069c <NVIC_Init>


	/* Enable the ADC */
	ADC_Cmd(ADC1, ENABLE);
 800193e:	2101      	movs	r1, #1
 8001940:	4809      	ldr	r0, [pc, #36]	; (8001968 <adc_init+0xd4>)
 8001942:	f7fe ff7f 	bl	8000844 <ADC_Cmd>
	/* Wait until the ADC1 is ready */
	while(ADC_GetFlagStatus(ADC1, ADC_FLAG_ADONS) == RESET)
 8001946:	bf00      	nop
 8001948:	2140      	movs	r1, #64	; 0x40
 800194a:	4807      	ldr	r0, [pc, #28]	; (8001968 <adc_init+0xd4>)
 800194c:	f7ff f934 	bl	8000bb8 <ADC_GetFlagStatus>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0f8      	beq.n	8001948 <adc_init+0xb4>
	{
	}
	/* Start ADC Software Conversion */
	ADC_SoftwareStartConv(ADC1);
 8001956:	4804      	ldr	r0, [pc, #16]	; (8001968 <adc_init+0xd4>)
 8001958:	f7ff f8f6 	bl	8000b48 <ADC_SoftwareStartConv>
}
 800195c:	bf00      	nop
 800195e:	3728      	adds	r7, #40	; 0x28
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40020000 	.word	0x40020000
 8001968:	40012400 	.word	0x40012400

0800196c <led_init>:

void led_init(){
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8001972:	2101      	movs	r1, #1
 8001974:	2001      	movs	r0, #1
 8001976:	f7ff fb01 	bl	8000f7c <RCC_AHBPeriphClockCmd>
	GPIO_InitTypeDef GPIO_LED;
	GPIO_LED.GPIO_Pin = GPIO_Pin_5;
 800197a:	2320      	movs	r3, #32
 800197c:	603b      	str	r3, [r7, #0]
	GPIO_LED.GPIO_Mode = GPIO_Mode_OUT;
 800197e:	2301      	movs	r3, #1
 8001980:	713b      	strb	r3, [r7, #4]
	GPIO_LED.GPIO_OType = GPIO_OType_PP;
 8001982:	2300      	movs	r3, #0
 8001984:	71bb      	strb	r3, [r7, #6]
	GPIO_LED.GPIO_PuPd = GPIO_PuPd_UP;
 8001986:	2301      	movs	r3, #1
 8001988:	71fb      	strb	r3, [r7, #7]
	GPIO_LED.GPIO_Speed = GPIO_Speed_40MHz;
 800198a:	2303      	movs	r3, #3
 800198c:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOA,&GPIO_LED);
 800198e:	463b      	mov	r3, r7
 8001990:	4619      	mov	r1, r3
 8001992:	4803      	ldr	r0, [pc, #12]	; (80019a0 <led_init+0x34>)
 8001994:	f7ff f92a 	bl	8000bec <GPIO_Init>
}
 8001998:	bf00      	nop
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40020000 	.word	0x40020000

080019a4 <usart_init>:

void usart_init(){
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b088      	sub	sp, #32
 80019a8:	af00      	add	r7, sp, #0

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 80019aa:	2101      	movs	r1, #1
 80019ac:	2001      	movs	r0, #1
 80019ae:	f7ff fae5 	bl	8000f7c <RCC_AHBPeriphClockCmd>

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
 80019b2:	2207      	movs	r2, #7
 80019b4:	2102      	movs	r1, #2
 80019b6:	482a      	ldr	r0, [pc, #168]	; (8001a60 <usart_init+0xbc>)
 80019b8:	f7ff f9ae 	bl	8000d18 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);
 80019bc:	2207      	movs	r2, #7
 80019be:	2103      	movs	r1, #3
 80019c0:	4827      	ldr	r0, [pc, #156]	; (8001a60 <usart_init+0xbc>)
 80019c2:	f7ff f9a9 	bl	8000d18 <GPIO_PinAFConfig>

	GPIO_InitTypeDef GPIO_usrt;

	GPIO_usrt.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 80019c6:	230c      	movs	r3, #12
 80019c8:	61bb      	str	r3, [r7, #24]
	GPIO_usrt.GPIO_Mode = GPIO_Mode_AF;
 80019ca:	2302      	movs	r3, #2
 80019cc:	773b      	strb	r3, [r7, #28]
	GPIO_usrt.GPIO_OType = GPIO_OType_PP;
 80019ce:	2300      	movs	r3, #0
 80019d0:	77bb      	strb	r3, [r7, #30]
	GPIO_usrt.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	77fb      	strb	r3, [r7, #31]
	GPIO_usrt.GPIO_Speed = GPIO_Speed_40MHz;
 80019d6:	2303      	movs	r3, #3
 80019d8:	777b      	strb	r3, [r7, #29]

	GPIO_Init(GPIOA,&GPIO_usrt);
 80019da:	f107 0318 	add.w	r3, r7, #24
 80019de:	4619      	mov	r1, r3
 80019e0:	481f      	ldr	r0, [pc, #124]	; (8001a60 <usart_init+0xbc>)
 80019e2:	f7ff f903 	bl	8000bec <GPIO_Init>

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 80019e6:	2101      	movs	r1, #1
 80019e8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80019ec:	f7ff fb02 	bl	8000ff4 <RCC_APB1PeriphClockCmd>

	USART_InitTypeDef USART_InitStructure;
	USART_InitStructure.USART_BaudRate = 9600;
 80019f0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80019f4:	60bb      	str	r3, [r7, #8]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 80019f6:	2300      	movs	r3, #0
 80019f8:	81bb      	strh	r3, [r7, #12]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 80019fa:	2300      	movs	r3, #0
 80019fc:	81fb      	strh	r3, [r7, #14]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 80019fe:	2300      	movs	r3, #0
 8001a00:	823b      	strh	r3, [r7, #16]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8001a02:	2300      	movs	r3, #0
 8001a04:	82bb      	strh	r3, [r7, #20]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8001a06:	230c      	movs	r3, #12
 8001a08:	827b      	strh	r3, [r7, #18]
	USART_Init(USART2, &USART_InitStructure);
 8001a0a:	f107 0308 	add.w	r3, r7, #8
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4814      	ldr	r0, [pc, #80]	; (8001a64 <usart_init+0xc0>)
 8001a12:	f7ff fb3f 	bl	8001094 <USART_Init>
	USART_Cmd(USART2, ENABLE);
 8001a16:	2101      	movs	r1, #1
 8001a18:	4812      	ldr	r0, [pc, #72]	; (8001a64 <usart_init+0xc0>)
 8001a1a:	f7ff fbef 	bl	80011fc <USART_Cmd>

	//interrupt
	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f240 5125 	movw	r1, #1317	; 0x525
 8001a24:	480f      	ldr	r0, [pc, #60]	; (8001a64 <usart_init+0xc0>)
 8001a26:	f7ff fc2b 	bl	8001280 <USART_ITConfig>
	USART_ITConfig(USART2, USART_IT_TC, ENABLE);
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f240 6126 	movw	r1, #1574	; 0x626
 8001a30:	480c      	ldr	r0, [pc, #48]	; (8001a64 <usart_init+0xc0>)
 8001a32:	f7ff fc25 	bl	8001280 <USART_ITConfig>

	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 8001a36:	f44f 7040 	mov.w	r0, #768	; 0x300
 8001a3a:	f7fe fe1d 	bl	8000678 <NVIC_PriorityGroupConfig>
	  /* Enable the USARTx Interrupt */
	NVIC_InitTypeDef NVIC_InitStructure;
	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 8001a3e:	2326      	movs	r3, #38	; 0x26
 8001a40:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 8001a42:	2301      	movs	r3, #1
 8001a44:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 8001a4e:	1d3b      	adds	r3, r7, #4
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7fe fe23 	bl	800069c <NVIC_Init>

}
 8001a56:	bf00      	nop
 8001a58:	3720      	adds	r7, #32
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40020000 	.word	0x40020000
 8001a64:	40004400 	.word	0x40004400

08001a68 <USART_send_data_NVIC>:
	}
	USART_SendData(USART2,'\r');
	while(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);
}

void USART_send_data_NVIC(char text[]){
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
	if (i == 0){
 8001a70:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <USART_send_data_NVIC+0x2c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d109      	bne.n	8001a8c <USART_send_data_NVIC+0x24>
		i = 1;
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <USART_send_data_NVIC+0x2c>)
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	601a      	str	r2, [r3, #0]
		USART_SendData(USART2,text[0]);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	4619      	mov	r1, r3
 8001a86:	4804      	ldr	r0, [pc, #16]	; (8001a98 <USART_send_data_NVIC+0x30>)
 8001a88:	f7ff fbd8 	bl	800123c <USART_SendData>
	}
}
 8001a8c:	bf00      	nop
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	2000004c 	.word	0x2000004c
 8001a98:	40004400 	.word	0x40004400

08001a9c <uloha2_function>:

void uloha2_function(){
 8001a9c:	b590      	push	{r4, r7, lr}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0

	if (rec_data == 'm'){
 8001aa2:	4b29      	ldr	r3, [pc, #164]	; (8001b48 <uloha2_function+0xac>)
 8001aa4:	881b      	ldrh	r3, [r3, #0]
 8001aa6:	2b6d      	cmp	r3, #109	; 0x6d
 8001aa8:	d10c      	bne.n	8001ac4 <uloha2_function+0x28>
		mode = !mode;
 8001aaa:	4b28      	ldr	r3, [pc, #160]	; (8001b4c <uloha2_function+0xb0>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	bf0c      	ite	eq
 8001ab2:	2301      	moveq	r3, #1
 8001ab4:	2300      	movne	r3, #0
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4b24      	ldr	r3, [pc, #144]	; (8001b4c <uloha2_function+0xb0>)
 8001abc:	701a      	strb	r2, [r3, #0]
		rec_data = ' ';
 8001abe:	4b22      	ldr	r3, [pc, #136]	; (8001b48 <uloha2_function+0xac>)
 8001ac0:	2220      	movs	r2, #32
 8001ac2:	801a      	strh	r2, [r3, #0]
	}

	switch(mode){
 8001ac4:	4b21      	ldr	r3, [pc, #132]	; (8001b4c <uloha2_function+0xb0>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d002      	beq.n	8001ad2 <uloha2_function+0x36>
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d008      	beq.n	8001ae2 <uloha2_function+0x46>
			uint8_t num1 = (uint8_t)a;
			sprintf(text,"%d.%dV", num1, (uint8_t)((a-num1)*100));
		}
		break;
	}
}
 8001ad0:	e035      	b.n	8001b3e <uloha2_function+0xa2>
		rec_data = ' ';
	}

	switch(mode){
		case 0:	{
			sprintf(text,"%d", adc_value);
 8001ad2:	4b1f      	ldr	r3, [pc, #124]	; (8001b50 <uloha2_function+0xb4>)
 8001ad4:	881b      	ldrh	r3, [r3, #0]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	491e      	ldr	r1, [pc, #120]	; (8001b54 <uloha2_function+0xb8>)
 8001ada:	481f      	ldr	r0, [pc, #124]	; (8001b58 <uloha2_function+0xbc>)
 8001adc:	f7ff fec4 	bl	8001868 <siprintf>
		}
		break;
 8001ae0:	e02d      	b.n	8001b3e <uloha2_function+0xa2>
		case 1: {
			float a = adc_value*adc_constant;
 8001ae2:	4b1b      	ldr	r3, [pc, #108]	; (8001b50 <uloha2_function+0xb4>)
 8001ae4:	881b      	ldrh	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7fe fc02 	bl	80002f0 <__aeabi_i2f>
 8001aec:	4602      	mov	r2, r0
 8001aee:	4b1b      	ldr	r3, [pc, #108]	; (8001b5c <uloha2_function+0xc0>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4619      	mov	r1, r3
 8001af4:	4610      	mov	r0, r2
 8001af6:	f7fe fc4f 	bl	8000398 <__aeabi_fmul>
 8001afa:	4603      	mov	r3, r0
 8001afc:	607b      	str	r3, [r7, #4]
			uint8_t num1 = (uint8_t)a;
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7fe fd9a 	bl	8000638 <__aeabi_f2uiz>
 8001b04:	4603      	mov	r3, r0
 8001b06:	70fb      	strb	r3, [r7, #3]
			sprintf(text,"%d.%dV", num1, (uint8_t)((a-num1)*100));
 8001b08:	78fc      	ldrb	r4, [r7, #3]
 8001b0a:	78fb      	ldrb	r3, [r7, #3]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7fe fbef 	bl	80002f0 <__aeabi_i2f>
 8001b12:	4603      	mov	r3, r0
 8001b14:	4619      	mov	r1, r3
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7fe fb34 	bl	8000184 <__aeabi_fsub>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	4910      	ldr	r1, [pc, #64]	; (8001b60 <uloha2_function+0xc4>)
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7fe fc39 	bl	8000398 <__aeabi_fmul>
 8001b26:	4603      	mov	r3, r0
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fd85 	bl	8000638 <__aeabi_f2uiz>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	4622      	mov	r2, r4
 8001b34:	490b      	ldr	r1, [pc, #44]	; (8001b64 <uloha2_function+0xc8>)
 8001b36:	4808      	ldr	r0, [pc, #32]	; (8001b58 <uloha2_function+0xbc>)
 8001b38:	f7ff fe96 	bl	8001868 <siprintf>
		}
		break;
 8001b3c:	bf00      	nop
	}
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd90      	pop	{r4, r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000052 	.word	0x20000052
 8001b4c:	2000004a 	.word	0x2000004a
 8001b50:	2000003c 	.word	0x2000003c
 8001b54:	08001c94 	.word	0x08001c94
 8001b58:	20000040 	.word	0x20000040
 8001b5c:	20000038 	.word	0x20000038
 8001b60:	42c80000 	.word	0x42c80000
 8001b64:	08001c98 	.word	0x08001c98

08001b68 <ADC1_IRQHandler>:

//handler prerusenia adc prevodnika
void ADC1_IRQHandler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
	if(ADC1->SR & (ADC_SR_EOC))
 8001b6c:	4b07      	ldr	r3, [pc, #28]	; (8001b8c <ADC1_IRQHandler+0x24>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d004      	beq.n	8001b82 <ADC1_IRQHandler+0x1a>
	{
		adc_value = ADC1->DR;
 8001b78:	4b04      	ldr	r3, [pc, #16]	; (8001b8c <ADC1_IRQHandler+0x24>)
 8001b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	4b04      	ldr	r3, [pc, #16]	; (8001b90 <ADC1_IRQHandler+0x28>)
 8001b80:	801a      	strh	r2, [r3, #0]
	}
}
 8001b82:	bf00      	nop
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc80      	pop	{r7}
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	40012400 	.word	0x40012400
 8001b90:	2000003c 	.word	0x2000003c

08001b94 <USART2_IRQHandler>:

//handler prerusenia usart prijmania
void USART2_IRQHandler(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
	if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8001b98:	f240 5125 	movw	r1, #1317	; 0x525
 8001b9c:	4820      	ldr	r0, [pc, #128]	; (8001c20 <USART2_IRQHandler+0x8c>)
 8001b9e:	f7ff fbb7 	bl	8001310 <USART_GetITStatus>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d00c      	beq.n	8001bc2 <USART2_IRQHandler+0x2e>
	{
		USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 8001ba8:	f240 5125 	movw	r1, #1317	; 0x525
 8001bac:	481c      	ldr	r0, [pc, #112]	; (8001c20 <USART2_IRQHandler+0x8c>)
 8001bae:	f7ff fc09 	bl	80013c4 <USART_ClearITPendingBit>
		rec_data = USART_ReceiveData(USART2);
 8001bb2:	481b      	ldr	r0, [pc, #108]	; (8001c20 <USART2_IRQHandler+0x8c>)
 8001bb4:	f7ff fb54 	bl	8001260 <USART_ReceiveData>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	461a      	mov	r2, r3
 8001bbc:	4b19      	ldr	r3, [pc, #100]	; (8001c24 <USART2_IRQHandler+0x90>)
 8001bbe:	801a      	strh	r2, [r3, #0]
				USART_SendData(USART2,text[i]);
				i++;
			}
		}
	}
}
 8001bc0:	e02c      	b.n	8001c1c <USART2_IRQHandler+0x88>
	if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
	{
		USART_ClearITPendingBit(USART2, USART_IT_RXNE);
		rec_data = USART_ReceiveData(USART2);
    }
	else if(USART_GetITStatus(USART2, USART_IT_TC) != RESET)
 8001bc2:	f240 6126 	movw	r1, #1574	; 0x626
 8001bc6:	4816      	ldr	r0, [pc, #88]	; (8001c20 <USART2_IRQHandler+0x8c>)
 8001bc8:	f7ff fba2 	bl	8001310 <USART_GetITStatus>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d024      	beq.n	8001c1c <USART2_IRQHandler+0x88>
	{
		USART_ClearITPendingBit(USART2, USART_IT_TC);
 8001bd2:	f240 6126 	movw	r1, #1574	; 0x626
 8001bd6:	4812      	ldr	r0, [pc, #72]	; (8001c20 <USART2_IRQHandler+0x8c>)
 8001bd8:	f7ff fbf4 	bl	80013c4 <USART_ClearITPendingBit>
		if (i > 0){
 8001bdc:	4b12      	ldr	r3, [pc, #72]	; (8001c28 <USART2_IRQHandler+0x94>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	dd1b      	ble.n	8001c1c <USART2_IRQHandler+0x88>
			if(text[i] == '\0'){
 8001be4:	4b10      	ldr	r3, [pc, #64]	; (8001c28 <USART2_IRQHandler+0x94>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a10      	ldr	r2, [pc, #64]	; (8001c2c <USART2_IRQHandler+0x98>)
 8001bea:	5cd3      	ldrb	r3, [r2, r3]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d107      	bne.n	8001c00 <USART2_IRQHandler+0x6c>
				USART_SendData(USART2,'\r');
 8001bf0:	210d      	movs	r1, #13
 8001bf2:	480b      	ldr	r0, [pc, #44]	; (8001c20 <USART2_IRQHandler+0x8c>)
 8001bf4:	f7ff fb22 	bl	800123c <USART_SendData>
				i = 0;
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <USART2_IRQHandler+0x94>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
				USART_SendData(USART2,text[i]);
				i++;
			}
		}
	}
}
 8001bfe:	e00d      	b.n	8001c1c <USART2_IRQHandler+0x88>
			if(text[i] == '\0'){
				USART_SendData(USART2,'\r');
				i = 0;
			}
			else{
				USART_SendData(USART2,text[i]);
 8001c00:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <USART2_IRQHandler+0x94>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a09      	ldr	r2, [pc, #36]	; (8001c2c <USART2_IRQHandler+0x98>)
 8001c06:	5cd3      	ldrb	r3, [r2, r3]
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4804      	ldr	r0, [pc, #16]	; (8001c20 <USART2_IRQHandler+0x8c>)
 8001c0e:	f7ff fb15 	bl	800123c <USART_SendData>
				i++;
 8001c12:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <USART2_IRQHandler+0x94>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	3301      	adds	r3, #1
 8001c18:	4a03      	ldr	r2, [pc, #12]	; (8001c28 <USART2_IRQHandler+0x94>)
 8001c1a:	6013      	str	r3, [r2, #0]
			}
		}
	}
}
 8001c1c:	bf00      	nop
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40004400 	.word	0x40004400
 8001c24:	20000052 	.word	0x20000052
 8001c28:	2000004c 	.word	0x2000004c
 8001c2c:	20000040 	.word	0x20000040

08001c30 <__libc_init_array>:
 8001c30:	4b0e      	ldr	r3, [pc, #56]	; (8001c6c <__libc_init_array+0x3c>)
 8001c32:	b570      	push	{r4, r5, r6, lr}
 8001c34:	461e      	mov	r6, r3
 8001c36:	4c0e      	ldr	r4, [pc, #56]	; (8001c70 <__libc_init_array+0x40>)
 8001c38:	2500      	movs	r5, #0
 8001c3a:	1ae4      	subs	r4, r4, r3
 8001c3c:	10a4      	asrs	r4, r4, #2
 8001c3e:	42a5      	cmp	r5, r4
 8001c40:	d004      	beq.n	8001c4c <__libc_init_array+0x1c>
 8001c42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c46:	4798      	blx	r3
 8001c48:	3501      	adds	r5, #1
 8001c4a:	e7f8      	b.n	8001c3e <__libc_init_array+0xe>
 8001c4c:	f000 f816 	bl	8001c7c <_init>
 8001c50:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <__libc_init_array+0x44>)
 8001c52:	4c09      	ldr	r4, [pc, #36]	; (8001c78 <__libc_init_array+0x48>)
 8001c54:	461e      	mov	r6, r3
 8001c56:	1ae4      	subs	r4, r4, r3
 8001c58:	10a4      	asrs	r4, r4, #2
 8001c5a:	2500      	movs	r5, #0
 8001c5c:	42a5      	cmp	r5, r4
 8001c5e:	d004      	beq.n	8001c6a <__libc_init_array+0x3a>
 8001c60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c64:	4798      	blx	r3
 8001c66:	3501      	adds	r5, #1
 8001c68:	e7f8      	b.n	8001c5c <__libc_init_array+0x2c>
 8001c6a:	bd70      	pop	{r4, r5, r6, pc}
 8001c6c:	08001ca0 	.word	0x08001ca0
 8001c70:	08001ca0 	.word	0x08001ca0
 8001c74:	08001ca0 	.word	0x08001ca0
 8001c78:	08001ca4 	.word	0x08001ca4

08001c7c <_init>:
 8001c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c7e:	bf00      	nop
 8001c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c82:	bc08      	pop	{r3}
 8001c84:	469e      	mov	lr, r3
 8001c86:	4770      	bx	lr

08001c88 <_fini>:
 8001c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c8a:	bf00      	nop
 8001c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c8e:	bc08      	pop	{r3}
 8001c90:	469e      	mov	lr, r3
 8001c92:	4770      	bx	lr
